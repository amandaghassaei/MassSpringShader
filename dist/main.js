(()=>{var e={650:(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(r):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r.r(t),r.d(t,{default:()=>d});var a,s,l,u,f,c=(a=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],s=function(){function e(t){var r=t.targetModal,n=t.triggers,o=void 0===n?[]:n,a=t.onShow,s=void 0===a?function(){}:a,l=t.onClose,u=void 0===l?function(){}:l,f=t.openTrigger,c=void 0===f?"data-micromodal-trigger":f,d=t.closeTrigger,h=void 0===d?"data-micromodal-close":d,g=t.openClass,v=void 0===g?"is-open":g,m=t.disableScroll,p=void 0!==m&&m,b=t.disableFocus,y=void 0!==b&&b,_=t.awaitCloseAnimation,T=void 0!==_&&_,E=t.awaitOpenAnimation,F=void 0!==E&&E,A=t.debugMode,w=void 0!==A&&A;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.modal=document.getElementById(r),this.config={debugMode:w,disableScroll:p,openTrigger:c,closeTrigger:h,openClass:v,onShow:s,onClose:u,awaitCloseAnimation:T,awaitOpenAnimation:F,disableFocus:y},o.length>0&&this.registerTriggers.apply(this,i(o)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}var t,r;return t=e,(r=[{key:"registerTriggers",value:function(){for(var e=this,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];r.filter(Boolean).forEach((function(t){t.addEventListener("click",(function(t){return e.showModal(t)}))}))}},{key:"showModal",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add(this.config.openClass),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.awaitOpenAnimation){var r=function t(){e.modal.removeEventListener("animationend",t,!1),e.setFocusToFirstNode()};this.modal.addEventListener("animationend",r,!1)}else this.setFocusToFirstNode();this.config.onShow(this.modal,this.activeElement,t)}},{key:"closeModal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.modal;if(this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement&&this.activeElement.focus&&this.activeElement.focus(),this.config.onClose(this.modal,this.activeElement,e),this.config.awaitCloseAnimation){var r=this.config.openClass;this.modal.addEventListener("animationend",(function e(){t.classList.remove(r),t.removeEventListener("animationend",e,!1)}),!1)}else t.classList.remove(this.config.openClass)}},{key:"closeModalById",value:function(e){this.modal=document.getElementById(e),this.modal&&this.closeModal()}},{key:"scrollBehaviour",value:function(e){if(this.config.disableScroll){var t=document.querySelector("body");switch(e){case"enable":Object.assign(t.style,{overflow:""});break;case"disable":Object.assign(t.style,{overflow:"hidden"})}}}},{key:"addEventListeners",value:function(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}},{key:"removeEventListeners",value:function(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}},{key:"onClick",value:function(e){e.target.hasAttribute(this.config.closeTrigger)&&this.closeModal(e)}},{key:"onKeydown",value:function(e){27===e.keyCode&&this.closeModal(e),9===e.keyCode&&this.retainFocus(e)}},{key:"getFocusableNodes",value:function(){var e=this.modal.querySelectorAll(a);return Array.apply(void 0,i(e))}},{key:"setFocusToFirstNode",value:function(){var e=this;if(!this.config.disableFocus){var t=this.getFocusableNodes();if(0!==t.length){var r=t.filter((function(t){return!t.hasAttribute(e.config.closeTrigger)}));r.length>0&&r[0].focus(),0===r.length&&t[0].focus()}}}},{key:"retainFocus",value:function(e){var t=this.getFocusableNodes();if(0!==t.length)if(t=t.filter((function(e){return null!==e.offsetParent})),this.modal.contains(document.activeElement)){var r=t.indexOf(document.activeElement);e.shiftKey&&0===r&&(t[t.length-1].focus(),e.preventDefault()),!e.shiftKey&&t.length>0&&r===t.length-1&&(t[0].focus(),e.preventDefault())}else t[0].focus()}}])&&n(t.prototype,r),e}(),l=null,u=function(e){if(!document.getElementById(e))return console.warn("MicroModal: ❗Seems like you have missed %c'".concat(e,"'"),"background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<div class="modal" id="'.concat(e,'"></div>')),!1},f=function(e,t){if(function(e){e.length<=0&&(console.warn("MicroModal: ❗Please specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>'))}(e),!t)return!0;for(var r in t)u(r);return!0},{init:function(e){var t=Object.assign({},{openTrigger:"data-micromodal-trigger"},e),r=i(document.querySelectorAll("[".concat(t.openTrigger,"]"))),n=function(e,t){var r=[];return e.forEach((function(e){var n=e.attributes[t].value;void 0===r[n]&&(r[n]=[]),r[n].push(e)})),r}(r,t.openTrigger);if(!0!==t.debugMode||!1!==f(r,n))for(var o in n){var a=n[o];t.targetModal=o,t.triggers=i(a),l=new s(t)}},show:function(e,t){var r=t||{};r.targetModal=e,!0===r.debugMode&&!1===u(e)||(l&&l.removeEventListeners(),(l=new s(r)).showModal())},close:function(e){e?l.closeModalById(e):l.closeModal()}});window.MicroModal=c;const d=c},607:(e,t,r)=>{"use strict";var n=r(561),i=r(650),o=r(942),a=r(539),s=r(950);i.default.init();var l=document.getElementById("glcanvas"),u=new n.GPGPU(null,l,(function(e){i.default.show("modal-2");var t=document.getElementById("glErrorMsg");t&&(t.innerHTML="Error: "+e);var r=document.getElementById("coverImg");r&&(r.style.display="block")})),f=u.initProgram("sim",o,[{name:"u_state",value:0,dataType:"INT"},{name:"u_pxSize",value:[1/l.clientWidth,1/l.clientHeight],dataType:"FLOAT"}]),c=u.initProgram("render",a,[{name:"u_state",value:0,dataType:"INT"}]),d=u.initProgram("interaction",s,[{name:"u_state",value:0,dataType:"INT"}]),h=u.initDataLayer("state",{width:l.clientWidth,height:l.clientHeight,type:"float16",numChannels:3},!0,2);function g(e){e.preventDefault();var t="scale(1)";document.body.style.webkitTransform=t,document.body.style.msTransform=t,document.body.style.transform=t}function v(){var e=l.clientWidth,t=l.clientHeight;h.resize(e,t),f.setUniform("u_pxSize",[1/e,1/t],"FLOAT"),u.onResize(l)}l.addEventListener("mousemove",(function(e){u.stepCircle(d,[e.clientX,e.clientY],10,[h],h)})),l.addEventListener("touchmove",(function(e){e.preventDefault();for(var t=0;t<e.touches.length;t++){var r=e.touches[t];u.stepCircle(d,[r.pageX,r.pageY],10,[h],h)}})),document.addEventListener("gesturestart",g),document.addEventListener("gesturechange",g),document.addEventListener("gestureend",g),v(),window.addEventListener("resize",v),window.requestAnimationFrame((function e(){u.stepNonBoundary(f,[h],h),u.step(c,[h]),window.requestAnimationFrame(e)}))},249:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DataLayer=void 0;var r=function(){function e(e,t,r,n,i,o){if(this.bufferIndex=0,this.buffers=[],this.name=e,this.gl=t,this.errorCallback=n,i<0||i%1!=0)throw new Error("Invalid numBuffers: "+i+" for DataLayer "+this.name+", must be positive integer.");this.numBuffers=i,this.width=r.width,this.height=r.height,this.glInternalFormat=r.glInternalFormat,this.glFormat=r.glFormat,this.glType=r.glType,this.writable=o,this.initBuffers(r.data)}return e.prototype.initBuffers=function(e){for(var t=this,r=t.numBuffers,n=t.gl,i=t.width,o=t.height,a=t.glInternalFormat,s=t.glFormat,l=t.glType,u=t.writable,f=t.errorCallback,c=0;c<r;c++){var d=n.createTexture();if(!d)return void f("Could not init texture for DataLayer "+this.name+": "+n.getError()+".");n.bindTexture(n.TEXTURE_2D,d),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE);var h=n.NEAREST;n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,h),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,h),n.texImage2D(n.TEXTURE_2D,0,a,i,o,0,s,l,e||null);var g={texture:d};if(u){var v=n.createFramebuffer();if(!v)return void f("Could not init framebuffer for DataLayer "+this.name+": "+n.getError()+".");n.bindFramebuffer(n.FRAMEBUFFER,v),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,d,0);var m=n.checkFramebufferStatus(n.FRAMEBUFFER);m!=n.FRAMEBUFFER_COMPLETE&&f("Invalid status for framebuffer for DataLayer "+this.name+": "+m+"."),g.framebuffer=v}this.buffers.push(g)}},e.prototype.getCurrentStateTexture=function(){return this.buffers[this.bufferIndex].texture},e.prototype.getLastStateTexture=function(){if(1===this.numBuffers)throw new Error("Calling getLastState on DataLayer "+this.name+" with 1 buffer, no last state available.");return this.buffers[this.bufferIndex].texture},e.prototype.setAsRenderTarget=function(e){var t=this.gl;e&&(this.bufferIndex=(this.bufferIndex+1)%this.numBuffers);var r=this.buffers[this.bufferIndex].framebuffer;if(!r)throw new Error("DataLayer "+this.name+" is not writable.");t.bindFramebuffer(t.FRAMEBUFFER,r)},e.prototype.resize=function(e,t,r){this.destroyBuffers(),this.width=e,this.height=t,this.initBuffers(r)},e.prototype.destroyBuffers=function(){var e=this.gl,t=this.buffers;t.forEach((function(t){var r=t.framebuffer,n=t.texture;e.deleteTexture(n),r&&e.deleteFramebuffer(r),delete t.texture,delete t.framebuffer})),t.length=0},e.prototype.destroy=function(){this.destroyBuffers(),delete this.gl},e}();t.DataLayer=r},576:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPGPU=void 0;for(var n=r(416),i=r(900),o=r(249),a=r(389),s=r(989),l=new Float32Array([-1,-1,1,-1,-1,1,1,1]),u=new Float32Array([-1,-1,1,-1,1,1,-1,1]),f=[0,0],c=0;c<=20;c++)f.push(Math.cos(2*Math.PI*c/20),Math.sin(2*Math.PI*c/20));var d=new Float32Array(f),h=function(){function e(e,t,r){void 0===r&&(r=function(e){throw new Error(e)}),this.extensions={},this.errorState=!1,this.shaders=[];var o=this;if(this.errorCallback=function(e){o.errorState||(o.errorState=!0,r&&r(e))},e||null!==(e=t.getContext("webgl2",{antialias:!1})||t.getContext("webgl",{antialias:!1}))){this.isWebGL2=!!e.HALF_FLOAT,this.isWebGL2?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=e,this.isWebGL2?this.loadExtension("EXT_color_buffer_float"):this.loadExtension("OES_texture_half_float"),this.linearFilterEnabled=this.loadExtension("OES_texture_half_float_linear",!0),e.disable(e.DEPTH_TEST),e.pixelStorei(e.UNPACK_ALIGNMENT,1);var a=s.compileShader(e,this.errorCallback,n.default,e.VERTEX_SHADER);if(a){this.defaultVertexShader=a,this.passThroughProgram=this.initProgram("passThrough",i.default,[{name:"u_state",value:0,dataType:"INT"}]),this.quadPositionsBuffer=this.initVertexBuffer(l),this.boundaryPositionsBuffer=this.initVertexBuffer(u),this.circlePositionsBuffer=this.initVertexBuffer(d),e.bindBuffer(e.ARRAY_BUFFER,null),this.onResize(t);var f=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);console.log(f+" textures max.")}else this.errorCallback("Unable to initialize fullscreen quad vertex shader.")}else this.errorCallback("Unable to initialize WebGL context.")}return e.prototype.initVertexBuffer=function(e){var t=this.errorCallback,r=this.gl,n=r.createBuffer();if(n)return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW),n;t("Unable to allocate gl buffer.")},e.prototype.loadExtension=function(e,t){void 0===t&&(t=!1);var r,n=this,i=n.extensions,o=n.gl,a=n.errorCallback;try{r=o.getExtension(e)}catch(e){}return r?(i[e]=r,console.log("Loaded extension: "+e+".")):console.warn("Unsupported "+(t?"optional ":"")+"extension: "+e+"."),r||t||a("Required extension unsupported by this device / browser: "+e+"."),!!r},e.prototype.initProgram=function(e,t,r){var n=this.gl,i=this.errorCallback;return this.defaultVertexShader,new a.GPUProgram(e,n,i,this.defaultVertexShader,t,r)},e.prototype.glTextureParameters=function(e,t,r){var n,i,o,a,s=this,l=s.gl,u=s.isWebGL2,f=s.extensions;if(u){switch(a=e,3===e&&r&&(a=4),a){case 1:i=l.RED;break;case 2:i=l.RG;break;case 3:i=l.RGB;break;case 4:i=l.RGBA}switch(t){case"float16":switch(n=l.HALF_FLOAT,a){case 1:o=l.R16F;break;case 2:o=l.RG16F;break;case 3:o=l.RGB16F;break;case 4:o=l.RGBA16F}break;case"uint8":switch(n=l.UNSIGNED_BYTE,a){case 1:o=l.R8;break;case 2:o=l.RG8;break;case 3:o=l.RGB8;break;case 4:o=l.RGBA8}}}else{switch(e){case 1:case 2:case 3:i=l.RGB,o=l.RGB,a=3;break;case 4:i=l.RGBA,o=l.RGBA,a=4}switch(t){case"float16":n=f.OES_texture_half_float.HALF_FLOAT_OES;break;case"uint8":n=l.UNSIGNED_BYTE}}if(void 0===n||void 0===i||void 0===o)throw new Error("Invalid type: "+t+" or numChannels "+e+".");if(void 0===a||e<1||e>4)throw new Error("Invalid numChannels: "+e+".");return{glFormat:i,glInternalFormat:o,glType:n,glNumChannels:a}},e.prototype.initDataLayer=function(e,t,r,n){void 0===r&&(r=!1),void 0===n&&(n=1);var i=this.gl,a=this.errorCallback,s=t.data,l=t.width,u=t.height,f=t.type,c=t.numChannels;if(s&&s.length!==l*u*c)throw new Error("Invalid data array of size "+s.length+" for DataLayer "+e+" of dimensions "+l+" x "+u+" x "+c+".");var d=this.glTextureParameters(c,f,r),h=d.glFormat,g=d.glInternalFormat,v=d.glNumChannels,m=d.glType,p=s;if(s&&c!==v){var b=l*u,y=void 0;switch(f){case"uint8":y=new Uint8Array(l*u*v);break;default:throw new Error("Error initing "+e+".  Unsupported type "+f+" for GPGPU.initDataLayer.")}for(var _=0;_<b;_++)for(var T=0;T<c;T++)y[v*_+T]=s[_*c+T];p=y}return new o.DataLayer(e,i,{width:l,height:u,glInternalFormat:g,glFormat:h,glType:m,data:p},a,n,r)},e.prototype.onResize=function(e){var t=this.gl,r=e.clientWidth,n=e.clientHeight;t.viewport(0,0,r,n),e.width=r,e.height=n,this.width=r,this.height=n},e.prototype.drawSetup=function(e,t,r,n){var i=this.gl;if(e.program){var o=r.map((function(e){return e.getCurrentStateTexture()}));this.setOutput(t,r,n),i.useProgram(e.program);for(var a=0;a<r.length;a++)i.activeTexture(i.TEXTURE0+a),i.bindTexture(i.TEXTURE_2D,o[a])}},e.prototype.setOutput=function(e,t,r){var n=this.gl,i=this.passThroughProgram;if(r){if(t.indexOf(r)>-1){if(1===r.numBuffers)throw new Error("\n\t\t\t\tCannot use same buffer for input and output of a program.\n\t\t\t\tTry increasing the number of buffers in your output layer to at least 2 so you\n\t\t\t\tcan render to nextState using currentState as an input.");return e?void r.setAsRenderTarget(!0):(this.step(i,[r],r),void r.setAsRenderTarget(!1))}r.setAsRenderTarget(!1)}else n.bindFramebuffer(n.FRAMEBUFFER,null)},e.prototype.step=function(e,t,r){void 0===t&&(t=[]);var n=this,i=n.gl,o=n.errorState,a=n.quadPositionsBuffer;if(!o){this.drawSetup(e,!0,t,r),e.setUniform("u_scale",[1,1],"FLOAT"),e.setUniform("u_translation",[0,0],"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,a);var s=i.getAttribLocation(e.program,"aPosition");i.vertexAttribPointer(s,2,i.FLOAT,!1,0,0),i.enableVertexAttribArray(s),i.drawArrays(i.TRIANGLE_STRIP,0,4)}},e.prototype.stepBoundary=function(e,t,r){void 0===t&&(t=[]);var n=this,i=n.gl,o=n.errorState,a=n.boundaryPositionsBuffer,s=n.width,l=n.height;if(!o){this.drawSetup(e,!1,t,r);var u=[1/s,1/l];e.setUniform("u_scale",[1-u[0],1-u[1]],"FLOAT"),e.setUniform("u_translation",u,"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,a);var f=i.getAttribLocation(e.program,"aPosition");i.vertexAttribPointer(f,2,i.FLOAT,!1,0,0),i.enableVertexAttribArray(f),i.drawArrays(i.LINE_LOOP,0,4)}},e.prototype.stepNonBoundary=function(e,t,r){void 0===t&&(t=[]);var n=this,i=n.gl,o=n.errorState,a=n.quadPositionsBuffer,s=n.width,l=n.height;if(!o){this.drawSetup(e,!1,t,r);var u=[1/s,1/l];e.setUniform("u_scale",[1-2*u[0],1-2*u[1]],"FLOAT"),e.setUniform("u_translation",u,"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,a);var f=i.getAttribLocation(e.program,"aPosition");i.vertexAttribPointer(f,2,i.FLOAT,!1,0,0),i.enableVertexAttribArray(f),i.drawArrays(i.TRIANGLE_STRIP,0,4)}},e.prototype.stepCircle=function(e,t,r,n,i){void 0===n&&(n=[]);var o=this,a=o.gl,s=o.errorState,l=o.circlePositionsBuffer,u=o.width,f=o.height;if(!s){this.drawSetup(e,!1,n,i),e.setUniform("u_scale",[r/u,r/f],"FLOAT"),e.setUniform("u_translation",[2*t[0]/u-1,-2*t[1]/f+1],"FLOAT"),a.bindBuffer(a.ARRAY_BUFFER,l);var c=a.getAttribLocation(e.program,"aPosition");a.vertexAttribPointer(c,2,a.FLOAT,!1,0,0),a.enableVertexAttribArray(c),a.drawArrays(a.TRIANGLE_FAN,0,22)}},e.prototype.reset=function(){},e}();t.GPGPU=h},389:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPUProgram=void 0;var n=r(647),i=r(989),o=function(){function e(e,t,r,n,o,a){var s=this;this.uniforms={},this.shaders=[],this.name=e,this.gl=t,this.errorCallback=r;var l=t.createProgram();if(l){var u=i.compileShader(t,r,o,t.FRAGMENT_SHADER);u?(this.shaders.push(u),t.attachShader(l,n),t.attachShader(l,u),t.linkProgram(l),t.getProgramParameter(l,t.LINK_STATUS)?(this.program=l,null==a||a.forEach((function(e){var t=e.name,r=e.value,n=e.dataType;s.setUniform(t,r,n)}))):r("Program "+e+" failed to link: "+t.getProgramInfoLog(l))):r("Unable to compile fragment shader for program "+e+".")}else r("Unable to init gl program: "+e+".")}return e.prototype.uniformTypeForValue=function(e,t){if(t===n.FLOAT_TYPE){if(!isNaN(e)||1===e.length)return n.FLOAT_1D_UNIFORM;if(2===e.length)return n.FLOAT_2D_UNIFORM;if(3===e.length)return n.FLOAT_3D_UNIFORM;if(4===e.length)return n.FLOAT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e)}if(t===n.INT_TYPE){if(!isNaN(e)||1===e.length)return n.INT_1D_UNIFORM;if(2===e.length)return n.INT_2D_UNIFORM;if(3===e.length)return n.INT_3D_UNIFORM;if(4===e.length)return n.INT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e)}throw new Error("Invalid uniform data type: "+t)},e.prototype.setUniform=function(e,t,r){var i=this,o=i.gl,a=i.errorCallback,s=i.program,l=i.uniforms;if(s){o.useProgram(s);var u=this.uniformTypeForValue(t,r);if(!l[e]){var f=o.getUniformLocation(s,e);if(!f)return void a("Could not init uniform "+e+".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type "+u+".\nError code: "+o.getError()+".");l[e]={location:f,type:u}}var c=l[e];if(c.type!=u)throw new Error("Uniform "+e+" cannot change from type "+c.type+" to type "+u+".");var d=c.location;switch(u){case n.FLOAT_1D_UNIFORM:o.uniform1f(d,t);break;case n.FLOAT_2D_UNIFORM:o.uniform2fv(d,t);break;case n.FLOAT_3D_UNIFORM:o.uniform3fv(d,t);break;case n.FLOAT_4D_UNIFORM:o.uniform4fv(d,t);break;case n.INT_1D_UNIFORM:o.uniform1i(d,t);break;case n.INT_2D_UNIFORM:o.uniform2iv(d,t);break;case n.INT_3D_UNIFORM:o.uniform3iv(d,t);break;case n.INT_4D_UNIFORM:o.uniform4iv(d,t);break;default:throw new Error("Unknown uniform type: "+u+".")}}else a("Program not inited.")},e.prototype.destroy=function(){var e=this,t=e.gl,r=e.program,n=e.shaders;r&&t.deleteProgram(r);for(var i=0;i<n.length;i++)t.deleteShader(n[i]);n.length=0,delete this.gl,delete this.program},e}();t.GPUProgram=o},647:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.INT_TYPE=t.FLOAT_TYPE=t.INT_4D_UNIFORM=t.INT_3D_UNIFORM=t.INT_2D_UNIFORM=t.INT_1D_UNIFORM=t.FLOAT_4D_UNIFORM=t.FLOAT_3D_UNIFORM=t.FLOAT_2D_UNIFORM=t.FLOAT_1D_UNIFORM=void 0,t.FLOAT_1D_UNIFORM="1f",t.FLOAT_2D_UNIFORM="2f",t.FLOAT_3D_UNIFORM="3f",t.FLOAT_4D_UNIFORM="3f",t.INT_1D_UNIFORM="1i",t.INT_2D_UNIFORM="2i",t.INT_3D_UNIFORM="3i",t.INT_4D_UNIFORM="3i",t.FLOAT_TYPE="FLOAT",t.INT_TYPE="INT"},561:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SingleColorFragShader=t.GPGPU=void 0;var n=r(576);Object.defineProperty(t,"GPGPU",{enumerable:!0,get:function(){return n.GPGPU}});var i=r(929);t.SingleColorFragShader=i.default},416:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\n\nattribute vec2 aPosition;\n\nuniform vec2 u_scale;\nuniform vec2 u_translation;\n\nvarying vec2 vUV_local;\nvarying vec2 vUV;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tvUV_local = 0.5 * (aPosition + 1.0);\n\t// Apply transformations.\n\tvec2 position = u_scale * aPosition + u_translation;\n\t// Calculate a global uv for the viewport.\n\tvUV = 0.5 * (position + 1.0);\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}\n"},900:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\n\nvarying vec2 vUV;\nuniform sampler2D u_state;\n\nvoid main() {\n\tgl_FragColor = texture2D(u_state, vUV);\n}"},929:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\n\nuniform vec3 u_color;\n\nvoid main() {\n\tgl_FragColor = vec4(u_color, 1);\n}"},989:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.compileShader=void 0,t.compileShader=function(e,t,r,n){var i=e.createShader(n);return i?(e.shaderSource(i,r),e.compileShader(i),e.getShaderParameter(i,e.COMPILE_STATUS)?i:(t("Could not compile "+(n===e.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t shader: "+e.getShaderInfoLog(i)),null)):(t("Unable to init gl shader."),null)}},950:e=>{e.exports="precision mediump float;\n\nvarying vec2 vUV;\nuniform sampler2D u_state;\n\nvoid main() {\n\tvec2 currentState = texture2D(u_state, vUV).xy;\n\t// Add external force to current px.\n\tgl_FragColor = vec4(currentState, -5.0, 0);\n}"},539:e=>{e.exports="precision mediump float;\n\nvarying vec2 vUV;\nuniform sampler2D u_state;\n\nvoid main() {\n\tfloat position = texture2D(u_state, vUV).r / 20.0 + 0.5;\n\tif (position > 1.0) position = 1.0;\n\tif (position < 0.0) position = 0.0;\n\n\tif (position < 0.5){\n\t\tposition *= 2.0;\n\t\t//position = 0 -> blue\n\t\t//position = 1 -> magenta\n\t\tgl_FragColor = vec4((255.0*position)/255.0,(179.0*(1.0-position))/255.0,(150.0-54.0*position)/255.0,1.0);\n\t} else {\n\t\tposition -= 0.5;\n\t\tposition *= 2.0;\n\t\t//position = 0 -> magenta\n\t\t//position = 1 -> white\n\t\tgl_FragColor = vec4((255.0-(10.0*position))/255.0,(223.0*position)/255.0,(106.0+(67.0*position))/255.0,1.0);\n\t}\n}"},942:e=>{e.exports="precision mediump float;\n\n#define K 2.0\n#define D 1.0\n#define DT 1.0\n#define MASS 10.0\n\nvarying vec2 vUV;\nuniform sampler2D u_state; // position, velocity, externalForces = r, g, b\nuniform vec2 u_pxSize;\n\nvoid main() {\n\n\tvec3 currentState = texture2D(u_state, vUV).xyz;\n\tfloat currentPosition = currentState.x;\n\tfloat currentVelocity = currentState.y;\n\tfloat fTotal = currentState.z;\n\n\t// Get interactions with N, S, E, W neighbors.\n\tfor (int i = -1; i <= 1; i += 2) {\n\t\tfor (int j = -1; j <= 1; j += 2) {\n\t\t\t// Calculate uv coordinate of neighbor px.\n\t\t\tvec2 neighborUV = vUV + vec2(u_pxSize.x * float(i), u_pxSize.y * float(j));\n\t\t\t// Apply spring damper constraint.\n\t\t\tvec2 neighborState = texture2D(u_state, neighborUV).xy;\n\t\t\tfloat deltaP =  neighborState.x - currentPosition;\n\t\t\tfloat deltaV = neighborState.y - currentVelocity;\n\t\t\tfTotal += K * deltaP + D * deltaV;\n\t\t}\n\t}\n\n\tfloat acceleration = fTotal / MASS;\n\tfloat velocity = acceleration * DT + currentVelocity;\n\tfloat position = velocity * DT + currentPosition;\n\n\tgl_FragColor = vec4(position, velocity, 0, 0);\n}"}},t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,