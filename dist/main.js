(()=>{var e={241:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DataLayer=void 0;var n=r(741),i=r(299),o=function(){function e(e,t,r,n,i,o){if(this.bufferIndex=0,this.buffers=[],this.name=e,this.gl=t,this.errorCallback=n,o<0||o%1!=0)throw new Error("Invalid numBuffers: "+o+" for DataLayer "+this.name+", must be positive integer.");if(this.numBuffers=o,isNaN(r.dimensions))this.width=r.dimensions[0],this.height=r.dimensions[1];else{if(r.dimensions<1)throw new Error("Invalid length "+r.dimensions+" for DataLayer "+e+".");this.length=r.dimensions;var a=this.calcWidthHeight(r.dimensions),s=a[0],l=a[1];this.width=s,this.height=l}this.type=this.checkType(r.type),this.numComponents=r.numComponents,this.writable=i;var u=r.filter?r.filter:this.length?"NEAREST":"LINEAR";this.filter=this.checkFilter(u,this.type),this.wrapS=t[r.wrapS?r.wrapS:"CLAMP_TO_EDGE"],this.wrapT=t[r.wrapT?r.wrapT:"CLAMP_TO_EDGE"];var c=this.getGLTextureParameters(),f=c.glFormat,d=c.glInternalFormat,h=c.glType,p=c.glNumChannels;this.glInternalFormat=d,this.glFormat=f,this.glType=h,this.glNumChannels=p,this.initBuffers(r.data)}return e.prototype.calcWidthHeight=function(e){for(var t=1,r=e;r>2;)t++,r/=2;return[Math.pow(2,Math.floor(t/2)+t%2),Math.pow(2,Math.floor(t/2))]},e.prototype.checkFilter=function(e,t){var r=this.gl,i=this.errorCallback;return"NEAREST"===e||("float16"===t&&(n.getExtension(r,n.OES_TEXTURE_HAlF_FLOAT_LINEAR,i,!0)||n.getExtension(r,n.OES_TEXTURE_FLOAT_LINEAR,i,!0)||(e="NEAREST")),"float32"===t&&(n.getExtension(r,n.OES_TEXTURE_FLOAT_LINEAR,i,!0)||(e="NEAREST"))),r[e]},e.prototype.checkType=function(e){var t=this.gl,r=this.errorCallback;return i.isWebGL2(t)||("float32"===e&&(n.getExtension(t,n.OES_TEXTURE_FLOAT,r,!0)||(e="float16")),"float16"===e&&n.getExtension(t,n.OES_TEXTURE_HALF_FLOAT,r)),!i.isWebGL2(t)||"float16"!==e&&"float32"!==e||n.getExtension(t,n.EXT_COLOR_BUFFER_FLOAT,r),e},e.prototype.checkDataArray=function(e){if(e){var t=this,r=t.width,n=t.height,i=t.length,o=t.numComponents,a=t.glNumChannels,s=t.type,l=t.name;if(i&&e.length!==i*o||!i&&e.length!==r*n*o)throw new Error("Invalid data length "+e.length+" for DataLayer "+l+" of size "+(i||r+"x"+n)+"x"+o+".");var u=!1;switch(s){case"float32":u=u||e.constructor!==Float32Array;break;case"float16":throw new Error("setting float16 from data not supported yet.");case"uint8":u=u||e.constructor!==Uint8Array;break;case"int8":u=u||e.constructor!==Int8Array;break;case"uint16":u=u||e.constructor!==Uint16Array;break;case"int16":u=u||e.constructor!==Int16Array;break;case"uint32":u=u||e.constructor!==Uint32Array;break;case"int32":u=u||e.constructor!==Int32Array;break;default:throw new Error("Error initing "+l+".  Unsupported type "+s+" for GLCompute.initDataLayer.")}if(u)throw new Error("Invalid TypedArray of type "+e.constructor.name+" supplied to DataLayer "+l+" of type "+s+".");var c=e,f=r*n*a;if(c.length<f){switch(s){case"float32":c=new Float32Array(f);break;case"uint8":c=new Uint8Array(f);break;case"int8":c=new Int8Array(f);break;case"uint16":c=new Uint16Array(f);break;case"int16":c=new Int16Array(f);break;case"uint32":c=new Uint32Array(f);break;case"int32":c=new Int32Array(f);break;default:throw new Error("Error initing "+l+".  Unsupported type "+s+" for GLCompute.initDataLayer.")}for(var d=0,h=e.length/o;d<h;d++)for(var p=0;p<o;p++)c[d*a+p]=e[d*o+p]}return c}},e.prototype.getGLTextureParameters=function(){var e,t,r,o,a=this,s=a.gl,l=a.numComponents,u=a.type,c=a.writable,f=a.name,d=a.errorCallback;if(i.isWebGL2(s)){switch(o=l,3===l&&c&&(o=4),o){case 1:t=s.RED;break;case 2:t=s.RG;break;case 3:t=s.RGB;break;case 4:t=s.RGBA;break;default:throw new Error("Unsupported glNumChannels "+o+" for DataLayer "+f+".")}switch(u){case"float32":switch(e=s.FLOAT,o){case 1:r=s.R32F;break;case 2:r=s.RG32F;break;case 3:r=s.RGB32F;break;case 4:r=s.RGBA32F;break;default:throw new Error("Unsupported glNumChannels "+o+" for DataLayer "+f+".")}break;case"float16":switch(e=s.HALF_FLOAT,o){case 1:r=s.R16F;break;case 2:r=s.RG16F;break;case 3:r=s.RGB16F;break;case 4:r=s.RGBA16F;break;default:throw new Error("Unsupported glNumChannels "+o+" for DataLayer "+f+".")}break;case"int8":switch(e=s.BYTE,o){case 1:r=s.R8I;break;case 2:r=s.RG8I;break;case 3:r=s.RGB8I;break;case 4:r=s.RGBA8I;break;default:throw new Error("Unsupported glNumChannels "+o+" for DataLayer "+f+".")}break;case"uint8":switch(e=s.UNSIGNED_BYTE,o){case 1:r=s.R8;break;case 2:r=s.RG8;break;case 3:r=s.RGB;break;case 4:r=s.RGBA;break;default:throw new Error("Unsupported glNumChannels "+o+" for DataLayer "+f+".")}break;case"int16":switch(e=s.SHORT,o){case 1:r=s.R16I;break;case 2:r=s.RG16I;break;case 3:r=s.RGB16I;break;case 4:r=s.RGBA16I;break;default:throw new Error("Unsupported glNumChannels "+o+" for DataLayer "+f+".")}case"uint16":switch(e=s.UNSIGNED_SHORT,o){case 1:r=s.R16UI;break;case 2:r=s.RG16UI;break;case 3:r=s.RGB16UI;break;case 4:r=s.RGBA16UI;break;default:throw new Error("Unsupported glNumChannels "+o+" for DataLayer "+f+".")}break;case"int32":switch(e=s.INT,o){case 1:r=s.R32I;break;case 2:r=s.RG32I;break;case 3:r=s.RGB32I;break;case 4:r=s.RGBA32I;break;default:throw new Error("Unsupported glNumChannels "+o+" for DataLayer "+f+".")}case"uint32":switch(e=s.UNSIGNED_INT,o){case 1:r=s.R32UI;break;case 2:r=s.RG32UI;break;case 3:r=s.RGB32UI;break;case 4:r=s.RGBA32UI;break;default:throw new Error("Unsupported glNumChannels "+o+" for DataLayer "+f+".")}break;default:throw new Error("Unsupported type "+u+" for DataLayer "+f+".")}}else{switch(l){case 1:case 2:case 3:t=s.RGB,r=s.RGB,o=3;break;case 4:t=s.RGBA,r=s.RGBA,o=4;break;default:throw new Error("Unsupported numComponents "+l+" for DataLayer "+f+".")}switch(u){case"float32":e=s.FLOAT;break;case"float16":e=n.getExtension(s,n.OES_TEXTURE_HALF_FLOAT,d).HALF_FLOAT_OES;break;case"uint8":e=s.UNSIGNED_BYTE;break;case"uint16":n.getExtension(s,n.WEBGL_DEPTH_TEXTURE,d),e=s.UNSIGNED_SHORT;break;case"uint32":n.getExtension(s,n.WEBGL_DEPTH_TEXTURE,d),e=s.UNSIGNED_INT;break;default:throw new Error("Unsupported type "+u+" for DataLayer "+f+".")}}if(void 0===e||void 0===t||void 0===r)throw new Error("Invalid type: "+u+" or numComponents "+l+".");if(void 0===o||l<1||l>4)throw new Error("Invalid numChannels: "+l+".");return{glFormat:t,glInternalFormat:r,glType:e,glNumChannels:o}},e.prototype.initBuffers=function(e){for(var t=this,r=t.numBuffers,n=t.gl,i=t.width,o=t.height,a=t.glInternalFormat,s=t.glFormat,l=t.glType,u=t.filter,c=t.wrapS,f=t.wrapT,d=t.writable,h=t.errorCallback,p=this.checkDataArray(e),g=0;g<r;g++){var m=n.createTexture();if(!m)return void h("Could not init texture for DataLayer "+this.name+": "+n.getError()+".");n.bindTexture(n.TEXTURE_2D,m),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,c),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,f),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,u),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,u),n.texImage2D(n.TEXTURE_2D,0,a,i,o,0,s,l,p||null);var v={texture:m};if(d){var b=n.createFramebuffer();if(!b)return void h("Could not init framebuffer for DataLayer "+this.name+": "+n.getError()+".");n.bindFramebuffer(n.FRAMEBUFFER,b),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,m,0);var E=n.checkFramebufferStatus(n.FRAMEBUFFER);E!=n.FRAMEBUFFER_COMPLETE&&h("Invalid status for framebuffer for DataLayer "+this.name+": "+E+"."),v.framebuffer=b}this.buffers.push(v)}n.bindFramebuffer(n.FRAMEBUFFER,null)},e.prototype.getCurrentStateTexture=function(){return this.buffers[this.bufferIndex].texture},e.prototype.bindOutputBuffer=function(e){var t=this.gl;e&&(this.bufferIndex=(this.bufferIndex+1)%this.numBuffers);var r=this.buffers[this.bufferIndex].framebuffer;if(!r)throw new Error("DataLayer "+this.name+" is not writable.");t.bindFramebuffer(t.FRAMEBUFFER,r)},e.prototype.resize=function(e,t){if(isNaN(e)){if(this.length)throw new Error("Invalid dimensions "+e+" for 1D DataLayer "+this.name+", please specify a length as a number.");this.width=e[0],this.height=e[1]}else{if(!this.length)throw new Error("Invalid dimensions "+e+" for 2D DataLayer "+this.name+", please specify a width and height as an array.");this.length=e;var r=this.calcWidthHeight(this.length),n=r[0],i=r[1];this.width=n,this.height=i}this.destroyBuffers(),this.initBuffers(t)},e.prototype.getDimensions=function(){return{width:this.width,height:this.height}},e.prototype.getLength=function(){if(!this.length)throw new Error("Cannot call getLength() on 2D DataLayer "+this.name+".");return this.length},e.prototype.destroyBuffers=function(){var e=this.gl,t=this.buffers;t.forEach((function(t){var r=t.framebuffer,n=t.texture;e.deleteTexture(n),r&&e.deleteFramebuffer(r),delete t.texture,delete t.framebuffer})),t.length=0},e.prototype.destroy=function(){this.destroyBuffers(),delete this.gl,delete this.errorCallback},e}();t.DataLayer=o},821:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GLCompute=void 0;for(var n=r(881),i=r(656),o=r(241),a=r(547),s=r(299),l=new Float32Array([-1,-1,1,-1,-1,1,1,1]),u=new Float32Array([-1,-1,1,-1,1,1,-1,1]),c=[0,0],f=0;f<=20;f++)c.push(Math.cos(2*Math.PI*f/20),Math.sin(2*Math.PI*f/20));var d=new Float32Array(c),h=function(){function e(e,t,r,o){void 0===o&&(o=function(e){throw new Error(e)}),this.errorState=!1;var a=this;if(this.errorCallback=function(e){a.errorState||(a.errorState=!0,o&&o(e))},e||null!==(e=t.getContext("webgl2",r)||t.getContext("webgl",r)||t.getContext("experimental-webgl",r))){s.isWebGL2(e)?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=e,e.disable(e.DEPTH_TEST),e.pixelStorei(e.UNPACK_ALIGNMENT,1);var c=s.compileShader(e,this.errorCallback,n.default,e.VERTEX_SHADER);if(c){this.defaultVertexShader=c,this.passThroughProgram=this.initProgram("passThrough",i.default,[{name:"u_state",value:0,dataType:"INT"}]),this.quadPositionsBuffer=this.initVertexBuffer(l),this.boundaryPositionsBuffer=this.initVertexBuffer(u),this.circlePositionsBuffer=this.initVertexBuffer(d),e.bindBuffer(e.ARRAY_BUFFER,null),this.onResize(t);var f=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);console.log(f+" textures max.")}else this.errorCallback("Unable to initialize fullscreen quad vertex shader.")}else this.errorCallback("Unable to initialize WebGL context.")}return e.prototype.initVertexBuffer=function(e){var t=this.errorCallback,r=this.gl,n=r.createBuffer();if(n)return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW),n;t("Unable to allocate gl buffer.")},e.prototype.initProgram=function(e,t,r,n){var i=this.gl,o=this.errorCallback;return new a.GPUProgram(e,i,o,n||this.defaultVertexShader,t,r)},e.prototype.initDataLayer=function(e,t,r,n){void 0===r&&(r=!1),void 0===n&&(n=1);var i=this.gl,a=this.errorCallback;return new o.DataLayer(e,i,t,a,r,n)},e.prototype.onResize=function(e){this.gl;var t=e.clientWidth,r=e.clientHeight;e.width=t,e.height=r,this.width=t,this.height=r},e.prototype.drawSetup=function(e,t,r,n){var i=this.gl;if(e.program){var o=r.map((function(e){return e.getCurrentStateTexture()}));this.setOutputLayer(t,r,n),i.useProgram(e.program);for(var a=0;a<o.length;a++)i.activeTexture(i.TEXTURE0+a),i.bindTexture(i.TEXTURE_2D,o[a])}},e.prototype.setOutputLayer=function(e,t,r){var n=this.gl,i=this.passThroughProgram;if(r){if(t.indexOf(r)>-1){if(1===r.numBuffers)throw new Error("\nCannot use same buffer for input and output of a program.\nTry increasing the number of buffers in your output layer to at least 2 so you\ncan render to nextState using currentState as an input.");e?r.bindOutputBuffer(!0):(this.step(i,[r],r),r.bindOutputBuffer(!1))}else r.bindOutputBuffer(!1);var o=r.getDimensions(),a=o.width,s=o.height;n.viewport(0,0,a,s)}else{n.bindFramebuffer(n.FRAMEBUFFER,null);var l=this.width,u=this.height;n.viewport(0,0,l,u)}},e.prototype.setPositionAttribute=function(e){var t=this.gl,r=t.getAttribLocation(e.program,"aPosition");t.vertexAttribPointer(r,2,t.FLOAT,!1,0,0),t.enableVertexAttribArray(r)},e.prototype.setIndexAttribute=function(e){var t=this.gl,r=t.getAttribLocation(e.program,"aIndex");t.vertexAttribPointer(r,1,t.FLOAT,!1,0,0),t.enableVertexAttribArray(r)},e.prototype.step=function(e,t,r,n){void 0===t&&(t=[]);var i=this,o=i.gl,a=i.errorState,s=i.quadPositionsBuffer;a||(this.drawSetup(e,!0,t,r),e.setUniform("u_scale",[1,1],"FLOAT"),e.setUniform("u_translation",[0,0],"FLOAT"),o.bindBuffer(o.ARRAY_BUFFER,s),this.setPositionAttribute(e),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.disable(o.BLEND))},e.prototype.stepBoundary=function(e,t,r,n){void 0===t&&(t=[]);var i=this,o=i.gl,a=i.errorState,s=i.boundaryPositionsBuffer;if(!a){this.drawSetup(e,!1,t,r);var l=r?r.getDimensions():this,u=[1/l.width,1/l.height];e.setUniform("u_scale",[1-u[0],1-u[1]],"FLOAT"),e.setUniform("u_translation",u,"FLOAT"),o.bindBuffer(o.ARRAY_BUFFER,s),this.setPositionAttribute(e),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.LINE_LOOP,0,4),o.disable(o.BLEND)}},e.prototype.stepNonBoundary=function(e,t,r,n){void 0===t&&(t=[]);var i=this,o=i.gl,a=i.errorState,s=i.quadPositionsBuffer;if(!a){this.drawSetup(e,!1,t,r);var l=r?r.getDimensions():this,u=[1/l.width,1/l.height];e.setUniform("u_scale",[1-2*u[0],1-2*u[1]],"FLOAT"),e.setUniform("u_translation",u,"FLOAT"),o.bindBuffer(o.ARRAY_BUFFER,s),this.setPositionAttribute(e),(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.TRIANGLE_STRIP,0,4),o.disable(o.BLEND)}},e.prototype.stepCircle=function(e,t,r,n,i,o){void 0===n&&(n=[]);var a=this,s=a.gl,l=a.errorState,u=a.circlePositionsBuffer,c=a.width,f=a.height;l||(this.drawSetup(e,!1,n,i),e.setUniform("u_scale",[r/c,r/f],"FLOAT"),e.setUniform("u_translation",[2*t[0]/c-1,2*t[1]/f-1],"FLOAT"),s.bindBuffer(s.ARRAY_BUFFER,u),this.setPositionAttribute(e),(null==o?void 0:o.shouldBlendAlpha)&&(s.enable(s.BLEND),s.blendFunc(s.SRC_ALPHA,s.ONE_MINUS_SRC_ALPHA)),s.drawArrays(s.TRIANGLE_FAN,0,22),s.disable(s.BLEND))},e.prototype.drawPoints=function(e,t,r,n){var i=this,o=i.gl,a=i.errorState,s=i.width,l=i.height,u=i.pointIndexArray;if(!a){if(t.length<1)throw new Error("Invalid inputLayers for drawPoints on "+e.name+": must pass a positionDataLayer as first element of inputLayers.");var c=t[0],f=c.getLength(),d=(null==n?void 0:n.numPoints)||f;if(d>f)throw new Error("Invalid numPoint "+d+" for positionDataLayer of length "+f+".");var h=(null==n?void 0:n.pointSize)||1;this.drawSetup(e,!1,t,r),e.setUniform("u_scale",[1/s,1/l],"FLOAT"),e.setUniform("u_pointSize",h,"FLOAT");var p=c.getDimensions();if(e.setUniform("u_positionDimensions",[p.width,p.height],"FLOAT"),void 0===this.pointIndexBuffer||u&&u.length<d){for(var g=new Float32Array(f),m=0;m<f;m++)g[m]=m;this.pointIndexArray=g,this.pointIndexBuffer=this.initVertexBuffer(g)}o.bindBuffer(o.ARRAY_BUFFER,this.pointIndexBuffer),this.setIndexAttribute(e),!1!==(null==n?void 0:n.shouldBlendAlpha)&&(o.enable(o.BLEND),o.blendFunc(o.SRC_ALPHA,o.ONE_MINUS_SRC_ALPHA)),o.drawArrays(o.POINTS,0,d),o.disable(o.BLEND)}},e.prototype.reset=function(){},e.prototype.destroy=function(){},e}();t.GLCompute=h},547:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPUProgram=void 0;var n=r(299),i=function(){function e(e,t,r,i,o,a){var s=this;this.uniforms={},this.shaders=[],this.attributes={},this.attributeNames=[],this.name=e,this.gl=t,this.errorCallback=r;var l=t.createProgram();if(l){if("string"==typeof o){var u=n.compileShader(t,r,o,t.FRAGMENT_SHADER,e);if(!u)return void r("Unable to compile fragment shader for program "+e+".");this.shaders.push(u),t.attachShader(l,u)}else t.attachShader(l,o);if("string"==typeof i){var c=n.compileShader(t,r,i,t.VERTEX_SHADER,e);if(!c)return void r("Unable to compile vertex shader for program "+e+".");this.shaders.push(c),t.attachShader(l,c)}else t.attachShader(l,i);t.linkProgram(l),t.getProgramParameter(l,t.LINK_STATUS)?(this.program=l,null==a||a.forEach((function(e){var t=e.name,r=e.value,n=e.dataType;s.setUniform(t,r,n)}))):r("Program "+e+" failed to link: "+t.getProgramInfoLog(l))}else r("Unable to init gl program: "+e+".")}return e.prototype.uniformTypeForValue=function(e,t){if("FLOAT"===t){if(!isNaN(e)||1===e.length)return"1f";if(2===e.length)return"2f";if(3===e.length)return"3f";if(4===e.length)return"3f";throw new Error("Invalid uniform value: "+e)}if("INT"===t){if(!isNaN(e)||1===e.length)return"1i";if(2===e.length)return"2i";if(3===e.length)return"3i";if(4===e.length)return"3i";throw new Error("Invalid uniform value: "+e)}throw new Error("Invalid uniform data type: "+t)},e.prototype.setUniform=function(e,t,r){var n=this,i=n.gl,o=n.errorCallback,a=n.program,s=n.uniforms;if(a){i.useProgram(a);var l=this.uniformTypeForValue(t,r);if(!s[e]){var u=i.getUniformLocation(a,e);if(!u)return void o("Could not init uniform "+e+".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type "+l+".\nError code: "+i.getError()+".");s[e]={location:u,type:l}}var c=s[e];if(c.type!=l)throw new Error("Uniform "+e+" cannot change from type "+c.type+" to type "+l+".");var f=c.location;switch(l){case"1f":i.uniform1f(f,t);break;case"2f":i.uniform2fv(f,t);break;case"3f":i.uniform3fv(f,t);break;case"3f":i.uniform4fv(f,t);break;case"1i":i.uniform1i(f,t);break;case"2i":i.uniform2iv(f,t);break;case"3i":i.uniform3iv(f,t);break;case"3i":i.uniform4iv(f,t);break;default:throw new Error("Unknown uniform type: "+l+".")}}else o("Program not inited.")},e.prototype.setVertexAttribute=function(e,t){var r=this,i=r.gl,o=r.errorCallback,a=r.program,s=r.attributes,l=r.attributeNames;if(a){if(!n.isWebGL2(i))throw new Error("Must use a webgl2 context for transform feedback.");if(i.useProgram(a),!s[e]){var u=i.getAttribLocation(a,e);if(!u)return void o("Could not init vertexAttribute "+e+".\nError code: "+i.getError()+".");s[e]={location:u,type:t},l.push(e)}var c=s[e];if(c.type!=t)throw new Error("Vertex attribute "+e+" cannot change from type "+c.type+" to type "+t+".")}else o("Program not inited.")},e.prototype.getAttributeLocation=function(e){var t=this,r=t.attributes,n=t.attributeNames,i=t.name,o=n[e];if(!o)throw new Error("Invalid attribute index "+e+" for program "+i+", current attributes: "+n.join(", ")+".");var a=r[o];if(!a)throw new Error("Invalid attribute "+o+" for program "+i+".");return a.location},e.prototype.destroy=function(){var e=this,t=e.gl,r=e.program,n=e.shaders;r&&t.deleteProgram(r);for(var i=0;i<n.length;i++)t.deleteShader(n[i]);n.length=0,delete this.gl,delete this.errorCallback,delete this.program},e}();t.GPUProgram=i},741:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getExtension=t.EXT_COLOR_BUFFER_FLOAT=t.WEBGL_DEPTH_TEXTURE=t.OES_TEXTURE_HAlF_FLOAT_LINEAR=t.OES_TEXTURE_FLOAT_LINEAR=t.OES_TEXTURE_HALF_FLOAT=t.OES_TEXTURE_FLOAT=void 0;var r={};t.OES_TEXTURE_FLOAT="OES_texture_float",t.OES_TEXTURE_HALF_FLOAT="OES_texture_half_float",t.OES_TEXTURE_FLOAT_LINEAR="OES_texture_float_linear",t.OES_TEXTURE_HAlF_FLOAT_LINEAR="OES_texture_half_float_linear",t.WEBGL_DEPTH_TEXTURE="WEBGL_depth_texture",t.EXT_COLOR_BUFFER_FLOAT="EXT_color_buffer_float",t.getExtension=function(e,t,n,i){if(void 0===i&&(i=!1),void 0!==r[t])return r[t];var o;try{o=e.getExtension(t)}catch(e){}return o?(r[t]=o,console.log("Loaded extension: "+t+".")):(r[t]=!1,console.warn("Unsupported "+(i?"optional ":"")+"extension: "+t+".")),o||i||n("Required extension unsupported by this device / browser: "+t+"."),o}},621:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PassThroughFragmentShader=t.PointsVertexShader=t.SingleColorFragShader=t.GLCompute=void 0;var n=r(821);Object.defineProperty(t,"GLCompute",{enumerable:!0,get:function(){return n.GLCompute}});var i=r(390);t.SingleColorFragShader=i.default;var o=r(345);t.PointsVertexShader=o.default;var a=r(656);t.PassThroughFragmentShader=a.default},881:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\n\nattribute vec2 aPosition;\n\nuniform vec2 u_scale;\nuniform vec2 u_translation;\n\nvarying vec2 vUV_local;\nvarying vec2 vUV;\n\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tvUV_local = 0.5 * (aPosition + 1.0);\n\n\t// Apply transformations.\n\tvec2 position = u_scale * aPosition + u_translation;\n\n\t// Calculate a global uv for the viewport.\n\tvUV = 0.5 * (position + 1.0);\n\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}\n"},656:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\n\nvarying vec2 vUV;\nuniform sampler2D u_state;\n\nvoid main() {\n\tgl_FragColor = texture2D(u_state, vUV);\n}"},345:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\nprecision highp int;\n\n// Cannot use int vertex attributes: https://stackoverflow.com/questions/27874983/webgl-how-to-use-integer-attributes-in-glsl\nattribute float aIndex; // Index of point.\n\nuniform sampler2D u_positions; // Texture lookup with position data.\nuniform vec2 u_positionDimensions;\nuniform vec2 u_scale;\nuniform float u_pointSize;\n\nvarying vec2 vUV;\nvarying vec2 vParticleUV;\n\n/**\n * Returns accurate MOD when arguments are approximate integers.\n */\nfloat modI(float a, float b) {\n    float m = a - floor((a + 0.5) / b) * b;\n    return floor(m + 0.5);\n}\n\nvoid main() {\n\t// Calculate a uv based on the point's index attribute.\n\tvParticleUV = vec2(modI(aIndex, u_positionDimensions.x), floor(floor(aIndex + 0.5) / u_positionDimensions.x)) / u_positionDimensions;\n\n\t// Calculate a global uv for the viewport.\n\t// Lookup vertex position and scale to [0, 1] range.\n\tvUV = texture2D(u_positions, vParticleUV).xy * u_scale;\n\n\t// Calculate position in [-1, 1] range.\n\tvec2 position = vUV * 2.0 - 1.0;\n\n\tgl_PointSize = u_pointSize;\n\tgl_Position = vec4(position, 0, 1);\n}\n"},390:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\n\nuniform vec3 u_color;\n\nvoid main() {\n\tgl_FragColor = vec4(u_color, 1);\n}"},299:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isWebGL2=t.compileShader=void 0,t.compileShader=function(e,t,r,n,i){var o=e.createShader(n);return o?(e.shaderSource(o,r),e.compileShader(o),e.getShaderParameter(o,e.COMPILE_STATUS)?o:(t("Could not compile "+(n===e.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t shader"+(i?" for program "+i:"")+": "+e.getShaderInfoLog(o)+"."),null)):(t("Unable to init gl shader."),null)},t.isWebGL2=function(e){return!!e.HALF_FLOAT}},650:(e,t,r)=>{"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}function i(e){return function(e){if(Array.isArray(e))return o(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return o(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(r):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?o(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function o(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,n=new Array(t);r<t;r++)n[r]=e[r];return n}r.r(t),r.d(t,{default:()=>d});var a,s,l,u,c,f=(a=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],s=function(){function e(t){var r=t.targetModal,n=t.triggers,o=void 0===n?[]:n,a=t.onShow,s=void 0===a?function(){}:a,l=t.onClose,u=void 0===l?function(){}:l,c=t.openTrigger,f=void 0===c?"data-micromodal-trigger":c,d=t.closeTrigger,h=void 0===d?"data-micromodal-close":d,p=t.openClass,g=void 0===p?"is-open":p,m=t.disableScroll,v=void 0!==m&&m,b=t.disableFocus,E=void 0!==b&&b,y=t.awaitCloseAnimation,_=void 0!==y&&y,w=t.awaitOpenAnimation,T=void 0!==w&&w,A=t.debugMode,L=void 0!==A&&A;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.modal=document.getElementById(r),this.config={debugMode:L,disableScroll:v,openTrigger:f,closeTrigger:h,openClass:g,onShow:s,onClose:u,awaitCloseAnimation:_,awaitOpenAnimation:T,disableFocus:E},o.length>0&&this.registerTriggers.apply(this,i(o)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}var t,r;return t=e,(r=[{key:"registerTriggers",value:function(){for(var e=this,t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];r.filter(Boolean).forEach((function(t){t.addEventListener("click",(function(t){return e.showModal(t)}))}))}},{key:"showModal",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add(this.config.openClass),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.awaitOpenAnimation){var r=function t(){e.modal.removeEventListener("animationend",t,!1),e.setFocusToFirstNode()};this.modal.addEventListener("animationend",r,!1)}else this.setFocusToFirstNode();this.config.onShow(this.modal,this.activeElement,t)}},{key:"closeModal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.modal;if(this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement&&this.activeElement.focus&&this.activeElement.focus(),this.config.onClose(this.modal,this.activeElement,e),this.config.awaitCloseAnimation){var r=this.config.openClass;this.modal.addEventListener("animationend",(function e(){t.classList.remove(r),t.removeEventListener("animationend",e,!1)}),!1)}else t.classList.remove(this.config.openClass)}},{key:"closeModalById",value:function(e){this.modal=document.getElementById(e),this.modal&&this.closeModal()}},{key:"scrollBehaviour",value:function(e){if(this.config.disableScroll){var t=document.querySelector("body");switch(e){case"enable":Object.assign(t.style,{overflow:""});break;case"disable":Object.assign(t.style,{overflow:"hidden"})}}}},{key:"addEventListeners",value:function(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}},{key:"removeEventListeners",value:function(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}},{key:"onClick",value:function(e){e.target.hasAttribute(this.config.closeTrigger)&&this.closeModal(e)}},{key:"onKeydown",value:function(e){27===e.keyCode&&this.closeModal(e),9===e.keyCode&&this.retainFocus(e)}},{key:"getFocusableNodes",value:function(){var e=this.modal.querySelectorAll(a);return Array.apply(void 0,i(e))}},{key:"setFocusToFirstNode",value:function(){var e=this;if(!this.config.disableFocus){var t=this.getFocusableNodes();if(0!==t.length){var r=t.filter((function(t){return!t.hasAttribute(e.config.closeTrigger)}));r.length>0&&r[0].focus(),0===r.length&&t[0].focus()}}}},{key:"retainFocus",value:function(e){var t=this.getFocusableNodes();if(0!==t.length)if(t=t.filter((function(e){return null!==e.offsetParent})),this.modal.contains(document.activeElement)){var r=t.indexOf(document.activeElement);e.shiftKey&&0===r&&(t[t.length-1].focus(),e.preventDefault()),!e.shiftKey&&t.length>0&&r===t.length-1&&(t[0].focus(),e.preventDefault())}else t[0].focus()}}])&&n(t.prototype,r),e}(),l=null,u=function(e){if(!document.getElementById(e))return console.warn("MicroModal: ❗Seems like you have missed %c'".concat(e,"'"),"background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<div class="modal" id="'.concat(e,'"></div>')),!1},c=function(e,t){if(function(e){e.length<=0&&(console.warn("MicroModal: ❗Please specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>'))}(e),!t)return!0;for(var r in t)u(r);return!0},{init:function(e){var t=Object.assign({},{openTrigger:"data-micromodal-trigger"},e),r=i(document.querySelectorAll("[".concat(t.openTrigger,"]"))),n=function(e,t){var r=[];return e.forEach((function(e){var n=e.attributes[t].value;void 0===r[n]&&(r[n]=[]),r[n].push(e)})),r}(r,t.openTrigger);if(!0!==t.debugMode||!1!==c(r,n))for(var o in n){var a=n[o];t.targetModal=o,t.triggers=i(a),l=new s(t)}},show:function(e,t){var r=t||{};r.targetModal=e,!0===r.debugMode&&!1===u(e)||(l&&l.removeEventListeners(),(l=new s(r)).showModal())},close:function(e){e?l.closeModalById(e):l.closeModal()}});window.MicroModal=f;const d=f},607:(e,t,r)=>{"use strict";var n=r(621),i=r(650),o=r(942),a=r(539),s=r(950);i.default.init();var l=document.getElementById("glcanvas"),u=new n.GLCompute(null,l,{antialias:!0},(function(e){i.default.show("modal-2");var t=document.getElementById("glErrorMsg");t&&(t.innerHTML="Error: "+e);var r=document.getElementById("coverImg");r&&(r.style.display="block")})),c=u.initProgram("sim",o,[{name:"u_state",value:0,dataType:"INT"},{name:"u_pxSize",value:[1/l.clientWidth,1/l.clientHeight],dataType:"FLOAT"}]),f=u.initProgram("render",a,[{name:"u_state",value:0,dataType:"INT"}]),d=u.initProgram("interaction",s,[{name:"u_state",value:0,dataType:"INT"}]),h=u.initDataLayer("state",{dimensions:[l.clientWidth,l.clientHeight],type:"float16",numComponents:3},!0,2);function p(e){e.preventDefault();var t="scale(1)";document.body.style.webkitTransform=t,document.body.style.msTransform=t,document.body.style.transform=t}function g(){var e=l.clientWidth,t=l.clientHeight;h.resize([e,t]),c.setUniform("u_pxSize",[1/e,1/t],"FLOAT"),u.onResize(l)}l.addEventListener("mousemove",(function(e){u.stepCircle(d,[e.clientX,l.clientHeight-e.clientY],10,[h],h)})),l.addEventListener("touchmove",(function(e){e.preventDefault();for(var t=0;t<e.touches.length;t++){var r=e.touches[t];u.stepCircle(d,[r.pageX,l.clientHeight-r.pageY],10,[h],h)}})),document.addEventListener("gesturestart",p),document.addEventListener("gesturechange",p),document.addEventListener("gestureend",p),g(),window.addEventListener("resize",g),window.requestAnimationFrame((function e(){u.stepNonBoundary(c,[h],h),u.step(f,[h]),window.requestAnimationFrame(e)}))},950:e=>{e.exports="precision mediump float;\n\nvarying vec2 vUV;\nuniform sampler2D u_state;\n\nvoid main() {\n\tvec2 currentState = texture2D(u_state, vUV).xy;\n\t// Add external force to current px.\n\tgl_FragColor = vec4(currentState, -5.0, 0);\n}"},539:e=>{e.exports="precision mediump float;\n\nvarying vec2 vUV;\nuniform sampler2D u_state;\n\nvoid main() {\n\tfloat position = texture2D(u_state, vUV).r / 20.0 + 0.5;\n\tif (position > 1.0) position = 1.0;\n\tif (position < 0.0) position = 0.0;\n\n\tif (position < 0.5){\n\t\tposition *= 2.0;\n\t\t//position = 0 -> blue\n\t\t//position = 1 -> magenta\n\t\tgl_FragColor = vec4((255.0*position)/255.0,(179.0*(1.0-position))/255.0,(150.0-54.0*position)/255.0,1.0);\n\t} else {\n\t\tposition -= 0.5;\n\t\tposition *= 2.0;\n\t\t//position = 0 -> magenta\n\t\t//position = 1 -> white\n\t\tgl_FragColor = vec4((255.0-(10.0*position))/255.0,(223.0*position)/255.0,(106.0+(67.0*position))/255.0,1.0);\n\t}\n}"},942:e=>{e.exports="precision mediump float;\n\n#define K 2.0\n#define D 1.0\n#define DT 1.0\n#define MASS 10.0\n\nvarying vec2 vUV;\nuniform sampler2D u_state; // position, velocity, externalForces = r, g, b\nuniform vec2 u_pxSize;\n\nvoid main() {\n\n\tvec3 currentState = texture2D(u_state, vUV).xyz;\n\tfloat currentPosition = currentState.x;\n\tfloat currentVelocity = currentState.y;\n\tfloat fTotal = currentState.z;\n\n\t// Get interactions with N, S, E, W neighbors.\n\tfor (int i = -1; i <= 1; i += 2) {\n\t\tfor (int j = -1; j <= 1; j += 2) {\n\t\t\t// Calculate uv coordinate of neighbor px.\n\t\t\tvec2 neighborUV = vUV + vec2(u_pxSize.x * float(i), u_pxSize.y * float(j));\n\t\t\t// Apply spring damper constraint.\n\t\t\tvec2 neighborState = texture2D(u_state, neighborUV).xy;\n\t\t\tfloat deltaP =  neighborState.x - currentPosition;\n\t\t\tfloat deltaV = neighborState.y - currentVelocity;\n\t\t\tfTotal += K * deltaP + D * deltaV;\n\t\t}\n\t}\n\n\tfloat acceleration = fTotal / MASS;\n\tfloat velocity = acceleration * DT + currentVelocity;\n\tfloat position = velocity * DT + currentPosition;\n\n\tgl_FragColor = vec4(position, velocity, 0, 0);\n}"}},t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}r.d=(e,t)=>{for(var n in t)r.o(t,n)&&!r.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,