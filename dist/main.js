(()=>{var e={607:(e,t,r)=>{"use strict";var n=r(561),i=r(942),o=r(146),a=r(539),s=r(950),u=document.getElementById("glcanvas"),l=new n.GPGPU(null,u);function f(e){e.preventDefault();var t="scale(1)";document.body.style.webkitTransform=t,document.body.style.msTransform=t,document.body.style.transform=t}function c(){var e=u.clientWidth,t=u.clientHeight;l.initTexture("currentState",e,t,"float16",3,!0,void 0,!0),l.initTexture("lastState",e,t,"float16",3,!0,void 0,!0),l.setProgramUniform("sim","u_pxSize",[1/e,1/t],"FLOAT"),l.onResize(u)}l.initProgram("sim",i,[{name:"u_state",value:0,dataType:"INT"},{name:"u_pxSize",value:[1/u.clientWidth,1/u.clientHeight],dataType:"FLOAT"}]),l.initProgram("boundary",o),l.initProgram("render",a,[{name:"u_state",value:0,dataType:"INT"}]),l.initProgram("interaction",s),window.onmousemove=function(e){l.stepCircle("interaction",[e.clientX,e.clientY],10,["currentState"],"lastState")},window.ontouchmove=function(e){e.preventDefault();for(var t=0;t<e.touches.length;t++){var r=e.touches[t];l.stepCircle("interaction",[r.pageX,r.pageY],10,["currentState"],"lastState")}},document.addEventListener("gesturestart",f),document.addEventListener("gesturechange",f),document.addEventListener("gestureend",f),window.addEventListener("resize",c),c(),window.requestAnimationFrame((function e(){l.step("sim",["lastState"],"currentState"),l.stepBoundary("boundary",[],"currentState"),l.step("render",["currentState"]),l.swapTextures("currentState","lastState"),window.requestAnimationFrame(e)}))},576:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPGPU=void 0;for(var n=r(416),i=r(647),o=new Float32Array([-1,-1,1,-1,-1,1,1,1]),a=new Float32Array([-1,-1,1,-1,1,1,-1,1]),s=[0,0],u=0;u<=20;u++)s.push(Math.cos(2*Math.PI*u/20),Math.sin(2*Math.PI*u/20));var l=new Float32Array(s),f=function(){function e(e,t,r){void 0===r&&(r=function(e){throw new Error(e)}),this.extensions={},this.errorState=!1,this.programs={},this.textures={},this.framebuffers={},this.shaders=[];var i=this;if(this.errorCallback=function(e){i.errorState=!0,r&&r(e)},e||null!==(e=t.getContext("webgl2",{antialias:!1})||t.getContext("webgl",{antialias:!1}))){this.isWebGL2=!!e.HALF_FLOAT,this.isWebGL2?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=e,this.isWebGL2?this.loadExtension("EXT_color_buffer_float"):this.loadExtension("OES_texture_half_float"),this.linearFilterEnabled=this.loadExtension("OES_texture_half_float_linear",!0),e.disable(e.DEPTH_TEST),e.pixelStorei(e.UNPACK_ALIGNMENT,1);var s=this.compileShader(n.default,e.VERTEX_SHADER);if(s){this.defaultVertexShader=s,this.quadPositionsBuffer=this.initVertexBuffer(o),this.boundaryPositionsBuffer=this.initVertexBuffer(a),this.circlePositionsBuffer=this.initVertexBuffer(l),e.bindBuffer(e.ARRAY_BUFFER,null),this.onResize(t);var u=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);console.log(u+" textures max.")}else r("Unable to initialize fullscreen quad vertex shader.")}else r("Unable to initialize WebGL context.")}return e.prototype.initVertexBuffer=function(e){var t=this.errorCallback,r=this.gl,n=r.createBuffer();if(n)return r.bindBuffer(r.ARRAY_BUFFER,n),r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW),n;t("Unable to allocate gl buffer.")},e.prototype.loadExtension=function(e,t){void 0===t&&(t=!1);var r,n=this,i=n.extensions,o=n.gl,a=n.errorCallback;try{r=o.getExtension(e)}catch(e){}return r?(i[e]=r,console.log("Loaded extension: "+e+".")):console.warn("Unsupported "+(t?"optional ":"")+"extension: "+e+"."),r||t||a("Required extension unsupported by this device / browser: "+e+"."),!!r},e.prototype.compileShader=function(e,t){var r=this,n=r.gl,i=r.errorCallback,o=r.shaders,a=n.createShader(t);return a?(n.shaderSource(a,e),n.compileShader(a),n.getShaderParameter(a,n.COMPILE_STATUS)?(o.push(a),a):(i("Could not compile "+(t===n.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t\t shader: "+n.getShaderInfoLog(a)),null)):(i("Unable to init gl shader."),null)},e.prototype.initProgram=function(e,t,r){var n=this,i=this,o=i.programs,a=i.gl,s=i.errorCallback;if(o[e])return a.useProgram(o[e].program),void console.warn("Already a program with the name "+e+".");var u=this.compileShader(t,a.FRAGMENT_SHADER),l=this.defaultVertexShader;if(u&&l){var f=a.createProgram();f?(a.attachShader(f,l),a.attachShader(f,u),a.linkProgram(f),a.getProgramParameter(f,a.LINK_STATUS)||s("Program "+e+" filed to link: "+a.getProgramInfoLog(f)),o[e]={program:f,uniforms:{}},null==r||r.forEach((function(t){var r=t.name,i=t.value,o=t.dataType;n.setProgramUniform(e,r,i,o)}))):s("Unable to init gl program.")}else s("Unable to init shaders for program "+e+".")},e.prototype.uniformTypeForValue=function(e,t){if(t===i.FLOAT_TYPE){if(!isNaN(e)||1===e.length)return i.FLOAT_1D_UNIFORM;if(2===e.length)return i.FLOAT_2D_UNIFORM;if(3===e.length)return i.FLOAT_3D_UNIFORM;if(4===e.length)return i.FLOAT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e)}if(t===i.INT_TYPE){if(!isNaN(e)||1===e.length)return i.INT_1D_UNIFORM;if(2===e.length)return i.INT_2D_UNIFORM;if(3===e.length)return i.INT_3D_UNIFORM;if(4===e.length)return i.INT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e)}throw new Error("Invalid uniform data type: "+t)},e.prototype.setProgramUniform=function(e,t,r,n){var o=this,a=o.gl,s=o.programs,u=o.errorCallback,l=s[e];if(!l)throw new Error("Count not set uniform, no program of name: "+e+".");a.useProgram(l.program);var f=l.uniforms,c=this.uniformTypeForValue(r,n);if(!f[t]){var d=a.getUniformLocation(l.program,t);if(!d)return void u("Could not init uniform "+t+" for program "+e+".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type "+c+".\nError code: "+a.getError()+".");f[t]={location:d,type:c}}var h=f[t];if(h.type!=c)throw new Error("Uniform "+t+" cannot change from type "+h.type+" to type "+c+".");var m=h.location;switch(c){case i.FLOAT_1D_UNIFORM:a.uniform1f(m,r);break;case i.FLOAT_2D_UNIFORM:a.uniform2fv(m,r);break;case i.FLOAT_3D_UNIFORM:a.uniform3fv(m,r);break;case i.FLOAT_4D_UNIFORM:a.uniform4fv(m,r);break;case i.INT_1D_UNIFORM:a.uniform1i(m,r);break;case i.INT_2D_UNIFORM:a.uniform2iv(m,r);break;case i.INT_3D_UNIFORM:a.uniform3iv(m,r);break;case i.INT_4D_UNIFORM:a.uniform4iv(m,r);break;default:throw new Error("Unknown uniform type: "+c+".")}},e.prototype.initFramebufferForTexture=function(e,t){void 0===t&&(t=!1);var r=this,n=r.gl,i=r.framebuffers,o=r.textures,a=r.errorCallback;i[e]&&(t||console.warn("Already a framebuffer with the name "+e+", use shouldOverwrite flag in initTexture() to ignore."),n.deleteFramebuffer(i[e]));var s=o[e];if(!s)throw new Error("Cannot init framebuffer, texture "+e+" does not exist.");var u=n.createFramebuffer();if(u){n.bindFramebuffer(n.FRAMEBUFFER,u),n.framebufferTexture2D(n.FRAMEBUFFER,n.COLOR_ATTACHMENT0,n.TEXTURE_2D,s,0);var l=n.checkFramebufferStatus(n.FRAMEBUFFER);l!=n.FRAMEBUFFER_COMPLETE&&a("Invalid status for "+e+" framebuffer: "+l+"."),i[e]=u}else a("Could not init "+e+" framebuffer: "+n.getError()+".")},e.prototype.glTextureParameters=function(e,t,r){var n,i,o,a,s=this,u=s.gl,l=s.isWebGL2,f=s.extensions;if(l){switch(a=e,3===e&&r&&(a=4),a){case 1:i=u.RED;break;case 2:i=u.RG;break;case 3:i=u.RGB;break;case 4:i=u.RGBA}switch(t){case"float16":switch(n=u.HALF_FLOAT,a){case 1:o=u.R16F;break;case 2:o=u.RG16F;break;case 3:o=u.RGB16F;break;case 4:o=u.RGBA16F}break;case"uint8":switch(n=u.UNSIGNED_BYTE,a){case 1:o=u.R8;break;case 2:o=u.RG8;break;case 3:o=u.RGB8;break;case 4:o=u.RGBA8}}}else{switch(e){case 1:case 2:case 3:i=u.RGB,o=u.RGB,a=3;break;case 4:i=u.RGBA,o=u.RGBA,a=4}switch(t){case"float16":n=f.OES_texture_half_float.HALF_FLOAT_OES;break;case"uint8":n=u.UNSIGNED_BYTE}}if(void 0===n||void 0===i||void 0===o)throw new Error("Invalid type: "+t+" or numChannels "+e+".");if(void 0===a||e<1||e>4)throw new Error("Invalid numChannels: "+e+".");return{glFormat:i,glInternalFormat:o,glType:n,glNumChannels:a}},e.prototype.initTexture=function(e,t,r,n,i,o,a,s){void 0===o&&(o=!1),void 0===s&&(s=!1);var u=this,l=u.gl,f=u.textures,c=u.framebuffers,d=u.errorCallback;if(f[e]&&(s||console.warn("Already a texture with the name "+e+", use shouldOverwrite flag to ignore."),l.deleteTexture(f[e])),a&&a.length!==t*r*i)throw new Error("Invalid data array of size "+a.length+" for texture of dimensions "+t+" x "+r+" x "+i+".");var h=l.createTexture();if(h){l.bindTexture(l.TEXTURE_2D,h),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_S,l.CLAMP_TO_EDGE),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_WRAP_T,l.CLAMP_TO_EDGE);var m=l.NEAREST;l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MIN_FILTER,m),l.texParameteri(l.TEXTURE_2D,l.TEXTURE_MAG_FILTER,m);var p=this.glTextureParameters(i,n,o),_=p.glFormat,v=p.glInternalFormat,g=p.glNumChannels,T=p.glType;if(a&&i!==g){var F=t*r,E=void 0;switch(n){case"uint8":E=new Uint8Array(t*r*g);break;default:throw new Error("Unsupported type "+n+" for initTexture.")}for(var b=0;b<F;b++)for(var R=0;R<i;R++)E[g*b+R]=a[b*i+R];a=E}l.texImage2D(l.TEXTURE_2D,0,v,t,r,0,_,T,a||null),f[e]=h,o?this.initFramebufferForTexture(e,s):s&&c[e]&&(l.deleteFramebuffer(c[e]),delete c[e])}else d("Could not init "+e+" texture: "+l.getError()+".")},e.prototype.onResize=function(e){var t=this.gl,r=e.clientWidth,n=e.clientHeight;t.viewport(0,0,r,n),e.width=r,e.height=n,this.width=r,this.height=n},e.prototype._step=function(e,t,r){var n=this,i=n.gl,o=n.programs,a=n.framebuffers,s=o[e];if(!s)throw new Error("Invalid program name: "+e+".");i.useProgram(s.program);var u=r?a[r]:null;if(void 0===u)throw new Error("Invalid output texture: "+r+".");i.bindFramebuffer(i.FRAMEBUFFER,u);for(var l=0;l<t.length;l++)i.activeTexture(i.TEXTURE0+l),i.bindTexture(i.TEXTURE_2D,this.textures[t[l]]);var f=i.getAttribLocation(s.program,"aPosition");i.vertexAttribPointer(f,2,i.FLOAT,!1,0,0),i.enableVertexAttribArray(f)},e.prototype.step=function(e,t,r){void 0===t&&(t=[]);var n=this,i=n.gl,o=n.errorState,a=n.quadPositionsBuffer;o||(this.setProgramUniform(e,"u_scale",[1,1],"FLOAT"),this.setProgramUniform(e,"u_translation",[0,0],"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,a),this._step(e,t,r),i.drawArrays(i.TRIANGLE_STRIP,0,4))},e.prototype.stepBoundary=function(e,t,r){void 0===t&&(t=[]);var n=this,i=n.gl,o=n.errorState,a=n.boundaryPositionsBuffer;o||(this.setProgramUniform(e,"u_scale",[1,1],"FLOAT"),this.setProgramUniform(e,"u_translation",[0,0],"FLOAT"),i.bindBuffer(i.ARRAY_BUFFER,a),this._step(e,t,r),i.drawArrays(i.LINE_LOOP,0,4))},e.prototype.stepCircle=function(e,t,r,n,i){void 0===n&&(n=[]);var o=this,a=o.gl,s=o.errorState,u=o.circlePositionsBuffer,l=o.width,f=o.height;s||(this.setProgramUniform(e,"u_scale",[r/l,r/f],"FLOAT"),this.setProgramUniform(e,"u_translation",[2*t[0]/l-1,-2*t[1]/f+1],"FLOAT"),a.bindBuffer(a.ARRAY_BUFFER,u),this._step(e,n,i),a.drawArrays(a.TRIANGLE_FAN,0,22))},e.prototype.swapTextures=function(e,t){var r=this.textures,n=this.framebuffers,i=r[e];r[e]=this.textures[t],r[t]=i,i=n[e],n[e]=this.framebuffers[t],n[t]=i},e.prototype.reset=function(){var e=this,t=e.gl,r=e.programs,n=e.framebuffers,i=e.textures,o=e.shaders,a=e.defaultVertexShader;Object.keys(r).forEach((function(e){var n=r[e].program;t.deleteProgram(n),delete r[e]})),Object.keys(n).forEach((function(e){var r=n[e];t.deleteFramebuffer(r),delete n[e]})),Object.keys(i).forEach((function(e){var r=i[e];t.deleteTexture(r),delete i[e]}));for(var s=o.length-1;s>=0;s--)o[s]!==a&&(t.deleteShader(o[s]),o.splice(s,1))},e}();t.GPGPU=f},647:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.INT_TYPE=t.FLOAT_TYPE=t.INT_4D_UNIFORM=t.INT_3D_UNIFORM=t.INT_2D_UNIFORM=t.INT_1D_UNIFORM=t.FLOAT_4D_UNIFORM=t.FLOAT_3D_UNIFORM=t.FLOAT_2D_UNIFORM=t.FLOAT_1D_UNIFORM=void 0,t.FLOAT_1D_UNIFORM="1f",t.FLOAT_2D_UNIFORM="2f",t.FLOAT_3D_UNIFORM="3f",t.FLOAT_4D_UNIFORM="3f",t.INT_1D_UNIFORM="1i",t.INT_2D_UNIFORM="2i",t.INT_3D_UNIFORM="3i",t.INT_4D_UNIFORM="3i",t.FLOAT_TYPE="FLOAT",t.INT_TYPE="INT"},561:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPGPU=void 0;var n=r(576);Object.defineProperty(t,"GPGPU",{enumerable:!0,get:function(){return n.GPGPU}})},416:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\nattribute vec2 aPosition;\nuniform vec2 u_scale;\nuniform vec2 u_translation;\nvarying vec2 uv_viewport;\nvarying vec2 uv;\nvoid main() {\n\t// Calculate UV coordinates [0, 1].\n\tuv = 0.5 * (aPosition + 1.0);\n\t// Apply transformations.\n\tvec2 position = u_scale * aPosition + u_translation;\n\t// Calculate a global uv for the viewport.\n\tuv_viewport = 0.5 * (position + 1.0);\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}\n"},146:e=>{e.exports="precision mediump float;\n\nvoid main() {\n\tgl_FragColor = vec4(0);\n}"},950:e=>{e.exports="precision mediump float;\n\nvarying vec2 uv;\nuniform sampler2D u_state;\n\nvoid main() {\n\tvec2 currentState = texture2D(u_state, uv).xy;\n\t// Add external force to current px.\n\tgl_FragColor = vec4(currentState, -5.0, 0);\n}"},539:e=>{e.exports="precision mediump float;\n\nvarying vec2 uv;\nuniform sampler2D u_state;\n\nvoid main() {\n\tfloat position = texture2D(u_state, uv).r / 20.0 + 0.5;\n\tif (position > 1.0) position = 1.0;\n\tif (position < 0.0) position = 0.0;\n\n\tif (position < 0.5){\n\t\tposition *= 2.0;\n\t\t//position = 0 -> blue\n\t\t//position = 1 -> magenta\n\t\tgl_FragColor = vec4((255.0*position)/255.0,(179.0*(1.0-position))/255.0,(150.0-54.0*position)/255.0,1.0);\n\t} else {\n\t\tposition -= 0.5;\n\t\tposition *= 2.0;\n\t\t//position = 0 -> magenta\n\t\t//position = 1 -> white\n\t\tgl_FragColor = vec4((255.0-(10.0*position))/255.0,(223.0*position)/255.0,(106.0+(67.0*position))/255.0,1.0);\n\t}\n}"},942:e=>{e.exports="precision mediump float;\n\n#define K 2.0\n#define D 1.0\n#define DT 1.0\n#define MASS 10.0\n\nvarying vec2 uv;\nuniform sampler2D u_state; // position, velocity, externalForces = r, g, b\nuniform vec2 u_pxSize;\n\nvoid main() {\n\n\tvec3 currentState = texture2D(u_state, uv).xyz;\n\tfloat currentPosition = currentState.x;\n\tfloat currentVelocity = currentState.y;\n\tfloat fTotal = currentState.z;\n\n\t// Get interactions with N, S, E, W neighbors.\n\tfor (int i = -1; i <= 1; i += 2) {\n\t\tfor (int j = -1; j <= 1; j += 2) {\n\t\t\t// Calculate uv coordinate of neighbor px.\n\t\t\tvec2 neighborUV = uv + vec2(u_pxSize.x * float(i), u_pxSize.y * float(j));\n\t\t\t// Apply spring damper constraint.\n\t\t\tvec2 neighborState = texture2D(u_state, neighborUV).xy;\n\t\t\tfloat deltaP =  neighborState.x - currentPosition;\n\t\t\tfloat deltaV = neighborState.y - currentVelocity;\n\t\t\tfTotal += K * deltaP + D * deltaV;\n\t\t}\n\t}\n\n\tfloat acceleration = fTotal / MASS;\n\tfloat velocity = acceleration * DT + currentVelocity;\n\tfloat position = velocity * DT + currentPosition;\n\n\tgl_FragColor = vec4(position, velocity, 0, 0);\n}"}},t={};!function r(n){if(t[n])return t[n].exports;var i=t[n]={exports:{}};return e[n](i,i.exports,r),i.exports}(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,