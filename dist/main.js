(()=>{var e={650:(e,t,r)=>{"use strict";function o(e,t){for(var r=0;r<t.length;r++){var o=t[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function n(e){return function(e){if(Array.isArray(e))return i(e)}(e)||function(e){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(e))return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return i(e,t);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(r):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?i(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t){(null==t||t>e.length)&&(t=e.length);for(var r=0,o=new Array(t);r<t;r++)o[r]=e[r];return o}r.r(t),r.d(t,{default:()=>d});var a,s,l,u,c,f=(a=["a[href]","area[href]",'input:not([disabled]):not([type="hidden"]):not([aria-hidden])',"select:not([disabled]):not([aria-hidden])","textarea:not([disabled]):not([aria-hidden])","button:not([disabled]):not([aria-hidden])","iframe","object","embed","[contenteditable]",'[tabindex]:not([tabindex^="-"])'],s=function(){function e(t){var r=t.targetModal,o=t.triggers,i=void 0===o?[]:o,a=t.onShow,s=void 0===a?function(){}:a,l=t.onClose,u=void 0===l?function(){}:l,c=t.openTrigger,f=void 0===c?"data-micromodal-trigger":c,d=t.closeTrigger,h=void 0===d?"data-micromodal-close":d,m=t.openClass,v=void 0===m?"is-open":m,g=t.disableScroll,p=void 0!==g&&g,b=t.disableFocus,_=void 0!==b&&b,T=t.awaitCloseAnimation,y=void 0!==T&&T,E=t.awaitOpenAnimation,F=void 0!==E&&E,A=t.debugMode,w=void 0!==A&&A;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.modal=document.getElementById(r),this.config={debugMode:w,disableScroll:p,openTrigger:f,closeTrigger:h,openClass:v,onShow:s,onClose:u,awaitCloseAnimation:y,awaitOpenAnimation:F,disableFocus:_},i.length>0&&this.registerTriggers.apply(this,n(i)),this.onClick=this.onClick.bind(this),this.onKeydown=this.onKeydown.bind(this)}var t,r;return t=e,(r=[{key:"registerTriggers",value:function(){for(var e=this,t=arguments.length,r=new Array(t),o=0;o<t;o++)r[o]=arguments[o];r.filter(Boolean).forEach((function(t){t.addEventListener("click",(function(t){return e.showModal(t)}))}))}},{key:"showModal",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;if(this.activeElement=document.activeElement,this.modal.setAttribute("aria-hidden","false"),this.modal.classList.add(this.config.openClass),this.scrollBehaviour("disable"),this.addEventListeners(),this.config.awaitOpenAnimation){var r=function t(){e.modal.removeEventListener("animationend",t,!1),e.setFocusToFirstNode()};this.modal.addEventListener("animationend",r,!1)}else this.setFocusToFirstNode();this.config.onShow(this.modal,this.activeElement,t)}},{key:"closeModal",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=this.modal;if(this.modal.setAttribute("aria-hidden","true"),this.removeEventListeners(),this.scrollBehaviour("enable"),this.activeElement&&this.activeElement.focus&&this.activeElement.focus(),this.config.onClose(this.modal,this.activeElement,e),this.config.awaitCloseAnimation){var r=this.config.openClass;this.modal.addEventListener("animationend",(function e(){t.classList.remove(r),t.removeEventListener("animationend",e,!1)}),!1)}else t.classList.remove(this.config.openClass)}},{key:"closeModalById",value:function(e){this.modal=document.getElementById(e),this.modal&&this.closeModal()}},{key:"scrollBehaviour",value:function(e){if(this.config.disableScroll){var t=document.querySelector("body");switch(e){case"enable":Object.assign(t.style,{overflow:""});break;case"disable":Object.assign(t.style,{overflow:"hidden"})}}}},{key:"addEventListeners",value:function(){this.modal.addEventListener("touchstart",this.onClick),this.modal.addEventListener("click",this.onClick),document.addEventListener("keydown",this.onKeydown)}},{key:"removeEventListeners",value:function(){this.modal.removeEventListener("touchstart",this.onClick),this.modal.removeEventListener("click",this.onClick),document.removeEventListener("keydown",this.onKeydown)}},{key:"onClick",value:function(e){e.target.hasAttribute(this.config.closeTrigger)&&this.closeModal(e)}},{key:"onKeydown",value:function(e){27===e.keyCode&&this.closeModal(e),9===e.keyCode&&this.retainFocus(e)}},{key:"getFocusableNodes",value:function(){var e=this.modal.querySelectorAll(a);return Array.apply(void 0,n(e))}},{key:"setFocusToFirstNode",value:function(){var e=this;if(!this.config.disableFocus){var t=this.getFocusableNodes();if(0!==t.length){var r=t.filter((function(t){return!t.hasAttribute(e.config.closeTrigger)}));r.length>0&&r[0].focus(),0===r.length&&t[0].focus()}}}},{key:"retainFocus",value:function(e){var t=this.getFocusableNodes();if(0!==t.length)if(t=t.filter((function(e){return null!==e.offsetParent})),this.modal.contains(document.activeElement)){var r=t.indexOf(document.activeElement);e.shiftKey&&0===r&&(t[t.length-1].focus(),e.preventDefault()),!e.shiftKey&&t.length>0&&r===t.length-1&&(t[0].focus(),e.preventDefault())}else t[0].focus()}}])&&o(t.prototype,r),e}(),l=null,u=function(e){if(!document.getElementById(e))return console.warn("MicroModal: ❗Seems like you have missed %c'".concat(e,"'"),"background-color: #f8f9fa;color: #50596c;font-weight: bold;","ID somewhere in your code. Refer example below to resolve it."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<div class="modal" id="'.concat(e,'"></div>')),!1},c=function(e,t){if(function(e){e.length<=0&&(console.warn("MicroModal: ❗Please specify at least one %c'micromodal-trigger'","background-color: #f8f9fa;color: #50596c;font-weight: bold;","data attribute."),console.warn("%cExample:","background-color: #f8f9fa;color: #50596c;font-weight: bold;",'<a href="#" data-micromodal-trigger="my-modal"></a>'))}(e),!t)return!0;for(var r in t)u(r);return!0},{init:function(e){var t=Object.assign({},{openTrigger:"data-micromodal-trigger"},e),r=n(document.querySelectorAll("[".concat(t.openTrigger,"]"))),o=function(e,t){var r=[];return e.forEach((function(e){var o=e.attributes[t].value;void 0===r[o]&&(r[o]=[]),r[o].push(e)})),r}(r,t.openTrigger);if(!0!==t.debugMode||!1!==c(r,o))for(var i in o){var a=o[i];t.targetModal=i,t.triggers=n(a),l=new s(t)}},show:function(e,t){var r=t||{};r.targetModal=e,!0===r.debugMode&&!1===u(e)||(l&&l.removeEventListeners(),(l=new s(r)).showModal())},close:function(e){e?l.closeModalById(e):l.closeModal()}});window.MicroModal=f;const d=f},607:(e,t,r)=>{"use strict";var o=r(561),n=r(650),i=r(942),a=r(539),s=r(950);n.default.init();var l=document.getElementById("glcanvas"),u=new o.GPGPU(null,l,(function(e){n.default.show("modal-2");var t=document.getElementById("glErrorMsg");t&&(t.innerHTML="Error: "+e);var r=document.getElementById("coverImg");r&&(r.style.display="block")}));function c(e){e.preventDefault();var t="scale(1)";document.body.style.webkitTransform=t,document.body.style.msTransform=t,document.body.style.transform=t}function f(){var e=l.clientWidth,t=l.clientHeight;u.initTexture("currentState",e,t,"float16",3,!0,void 0,!0),u.initTexture("lastState",e,t,"float16",3,!0,void 0,!0),u.setProgramUniform("sim","u_pxSize",[1/e,1/t],"FLOAT"),u.onResize(l)}u.initProgram("sim",i,[{name:"u_state",value:0,dataType:"INT"},{name:"u_pxSize",value:[1/l.clientWidth,1/l.clientHeight],dataType:"FLOAT"}]),u.initProgram("render",a,[{name:"u_state",value:0,dataType:"INT"}]),u.initProgram("interaction",s,[{name:"u_state",value:0,dataType:"INT"}]),l.addEventListener("mousemove",(function(e){u.stepCircle("interaction",[e.clientX,e.clientY],10,["currentState"],"lastState")})),l.addEventListener("touchmove",(function(e){e.preventDefault();for(var t=0;t<e.touches.length;t++){var r=e.touches[t];u.stepCircle("interaction",[r.pageX,r.pageY],10,["currentState"],"lastState")}})),document.addEventListener("gesturestart",c),document.addEventListener("gesturechange",c),document.addEventListener("gestureend",c),f(),l.addEventListener("resize",f),window.requestAnimationFrame((function e(){u.stepNonBoundary("sim",["lastState"],"currentState"),u.step("render",["currentState"]),u.swapTextures("currentState","lastState"),window.requestAnimationFrame(e)}))},576:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GPGPU=void 0;for(var o=r(416),n=r(647),i=new Float32Array([-1,-1,1,-1,-1,1,1,1]),a=new Float32Array([-1,-1,1,-1,1,1,-1,1]),s=[0,0],l=0;l<=20;l++)s.push(Math.cos(2*Math.PI*l/20),Math.sin(2*Math.PI*l/20));var u=new Float32Array(s),c=function(){function e(e,t,r){void 0===r&&(r=function(e){throw new Error(e)}),this.extensions={},this.errorState=!1,this.programs={},this.textures={},this.framebuffers={},this.shaders=[];var n=this;if(this.errorCallback=function(e){n.errorState=!0,r&&r(e)},e||null!==(e=t.getContext("webgl2",{antialias:!1})||t.getContext("webgl",{antialias:!1}))){this.isWebGL2=!!e.HALF_FLOAT,this.isWebGL2?console.log("Using WebGL 2.0 context."):console.log("Using WebGL 1.0 context."),this.gl=e,this.isWebGL2?this.loadExtension("EXT_color_buffer_float"):this.loadExtension("OES_texture_half_float"),this.linearFilterEnabled=this.loadExtension("OES_texture_half_float_linear",!0),e.disable(e.DEPTH_TEST),e.pixelStorei(e.UNPACK_ALIGNMENT,1);var s=this.compileShader(o.default,e.VERTEX_SHADER);if(s){this.defaultVertexShader=s,this.quadPositionsBuffer=this.initVertexBuffer(i),this.boundaryPositionsBuffer=this.initVertexBuffer(a),this.circlePositionsBuffer=this.initVertexBuffer(u),e.bindBuffer(e.ARRAY_BUFFER,null),this.onResize(t);var l=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS);console.log(l+" textures max.")}else r("Unable to initialize fullscreen quad vertex shader.")}else r("Unable to initialize WebGL context.")}return e.prototype.initVertexBuffer=function(e){var t=this.errorCallback,r=this.gl,o=r.createBuffer();if(o)return r.bindBuffer(r.ARRAY_BUFFER,o),r.bufferData(r.ARRAY_BUFFER,e,r.STATIC_DRAW),o;t("Unable to allocate gl buffer.")},e.prototype.loadExtension=function(e,t){void 0===t&&(t=!1);var r,o=this,n=o.extensions,i=o.gl,a=o.errorCallback;try{r=i.getExtension(e)}catch(e){}return r?(n[e]=r,console.log("Loaded extension: "+e+".")):console.warn("Unsupported "+(t?"optional ":"")+"extension: "+e+"."),r||t||a("Required extension unsupported by this device / browser: "+e+"."),!!r},e.prototype.compileShader=function(e,t){var r=this,o=r.gl,n=r.errorCallback,i=r.shaders,a=o.createShader(t);return a?(o.shaderSource(a,e),o.compileShader(a),o.getShaderParameter(a,o.COMPILE_STATUS)?(i.push(a),a):(n("Could not compile "+(t===o.FRAGMENT_SHADER?"fragment":"vertex")+"\n\t\t\t\t shader: "+o.getShaderInfoLog(a)),null)):(n("Unable to init gl shader."),null)},e.prototype.initProgram=function(e,t,r){var o=this,n=this,i=n.programs,a=n.gl,s=n.errorCallback;if(i[e])return a.useProgram(i[e].program),void console.warn("Already a program with the name "+e+".");var l=this.compileShader(t,a.FRAGMENT_SHADER),u=this.defaultVertexShader;if(l&&u){var c=a.createProgram();c?(a.attachShader(c,u),a.attachShader(c,l),a.linkProgram(c),a.getProgramParameter(c,a.LINK_STATUS)||s("Program "+e+" filed to link: "+a.getProgramInfoLog(c)),i[e]={program:c,uniforms:{}},null==r||r.forEach((function(t){var r=t.name,n=t.value,i=t.dataType;o.setProgramUniform(e,r,n,i)}))):s("Unable to init gl program.")}else s("Unable to init shaders for program "+e+".")},e.prototype.uniformTypeForValue=function(e,t){if(t===n.FLOAT_TYPE){if(!isNaN(e)||1===e.length)return n.FLOAT_1D_UNIFORM;if(2===e.length)return n.FLOAT_2D_UNIFORM;if(3===e.length)return n.FLOAT_3D_UNIFORM;if(4===e.length)return n.FLOAT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e)}if(t===n.INT_TYPE){if(!isNaN(e)||1===e.length)return n.INT_1D_UNIFORM;if(2===e.length)return n.INT_2D_UNIFORM;if(3===e.length)return n.INT_3D_UNIFORM;if(4===e.length)return n.INT_4D_UNIFORM;throw new Error("Invalid uniform value: "+e)}throw new Error("Invalid uniform data type: "+t)},e.prototype.setProgramUniform=function(e,t,r,o){var i=this,a=i.gl,s=i.programs,l=i.errorCallback,u=s[e];if(!u)throw new Error("Count not set uniform, no program of name: "+e+".");a.useProgram(u.program);var c=u.uniforms,f=this.uniformTypeForValue(r,o);if(!c[t]){var d=a.getUniformLocation(u.program,t);if(!d)return void l("Could not init uniform "+t+" for program "+e+".\nCheck that uniform is present in shader code, unused uniforms may be removed by compiler.\nAlso check that uniform type in shader code matches type "+f+".\nError code: "+a.getError()+".");c[t]={location:d,type:f}}var h=c[t];if(h.type!=f)throw new Error("Uniform "+t+" cannot change from type "+h.type+" to type "+f+".");var m=h.location;switch(f){case n.FLOAT_1D_UNIFORM:a.uniform1f(m,r);break;case n.FLOAT_2D_UNIFORM:a.uniform2fv(m,r);break;case n.FLOAT_3D_UNIFORM:a.uniform3fv(m,r);break;case n.FLOAT_4D_UNIFORM:a.uniform4fv(m,r);break;case n.INT_1D_UNIFORM:a.uniform1i(m,r);break;case n.INT_2D_UNIFORM:a.uniform2iv(m,r);break;case n.INT_3D_UNIFORM:a.uniform3iv(m,r);break;case n.INT_4D_UNIFORM:a.uniform4iv(m,r);break;default:throw new Error("Unknown uniform type: "+f+".")}},e.prototype.initFramebufferForTexture=function(e,t){void 0===t&&(t=!1);var r=this,o=r.gl,n=r.framebuffers,i=r.textures,a=r.errorCallback;n[e]&&(t||console.warn("Already a framebuffer with the name "+e+", use shouldOverwrite flag in initTexture() to ignore."),o.deleteFramebuffer(n[e]));var s=i[e];if(!s)throw new Error("Cannot init framebuffer, texture "+e+" does not exist.");var l=o.createFramebuffer();if(l){o.bindFramebuffer(o.FRAMEBUFFER,l),o.framebufferTexture2D(o.FRAMEBUFFER,o.COLOR_ATTACHMENT0,o.TEXTURE_2D,s,0);var u=o.checkFramebufferStatus(o.FRAMEBUFFER);u!=o.FRAMEBUFFER_COMPLETE&&a("Invalid status for "+e+" framebuffer: "+u+"."),n[e]=l}else a("Could not init "+e+" framebuffer: "+o.getError()+".")},e.prototype.glTextureParameters=function(e,t,r){var o,n,i,a,s=this,l=s.gl,u=s.isWebGL2,c=s.extensions;if(u){switch(a=e,3===e&&r&&(a=4),a){case 1:n=l.RED;break;case 2:n=l.RG;break;case 3:n=l.RGB;break;case 4:n=l.RGBA}switch(t){case"float16":switch(o=l.HALF_FLOAT,a){case 1:i=l.R16F;break;case 2:i=l.RG16F;break;case 3:i=l.RGB16F;break;case 4:i=l.RGBA16F}break;case"uint8":switch(o=l.UNSIGNED_BYTE,a){case 1:i=l.R8;break;case 2:i=l.RG8;break;case 3:i=l.RGB8;break;case 4:i=l.RGBA8}}}else{switch(e){case 1:case 2:case 3:n=l.RGB,i=l.RGB,a=3;break;case 4:n=l.RGBA,i=l.RGBA,a=4}switch(t){case"float16":o=c.OES_texture_half_float.HALF_FLOAT_OES;break;case"uint8":o=l.UNSIGNED_BYTE}}if(void 0===o||void 0===n||void 0===i)throw new Error("Invalid type: "+t+" or numChannels "+e+".");if(void 0===a||e<1||e>4)throw new Error("Invalid numChannels: "+e+".");return{glFormat:n,glInternalFormat:i,glType:o,glNumChannels:a}},e.prototype.initTexture=function(e,t,r,o,n,i,a,s){void 0===i&&(i=!1),void 0===s&&(s=!1);var l=this,u=l.gl,c=l.textures,f=l.framebuffers,d=l.errorCallback;if(c[e]&&(s||console.warn("Already a texture with the name "+e+", use shouldOverwrite flag to ignore."),u.deleteTexture(c[e])),a&&a.length!==t*r*n)throw new Error("Invalid data array of size "+a.length+" for texture of dimensions "+t+" x "+r+" x "+n+".");var h=u.createTexture();if(h){u.bindTexture(u.TEXTURE_2D,h),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_WRAP_S,u.CLAMP_TO_EDGE),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_WRAP_T,u.CLAMP_TO_EDGE);var m=u.NEAREST;u.texParameteri(u.TEXTURE_2D,u.TEXTURE_MIN_FILTER,m),u.texParameteri(u.TEXTURE_2D,u.TEXTURE_MAG_FILTER,m);var v=this.glTextureParameters(n,o,i),g=v.glFormat,p=v.glInternalFormat,b=v.glNumChannels,_=v.glType;if(a&&n!==b){var T=t*r,y=void 0;switch(o){case"uint8":y=new Uint8Array(t*r*b);break;default:throw new Error("Unsupported type "+o+" for initTexture.")}for(var E=0;E<T;E++)for(var F=0;F<n;F++)y[b*E+F]=a[E*n+F];a=y}u.texImage2D(u.TEXTURE_2D,0,p,t,r,0,g,_,a||null),c[e]=h,i?this.initFramebufferForTexture(e,s):s&&f[e]&&(u.deleteFramebuffer(f[e]),delete f[e])}else d("Could not init "+e+" texture: "+u.getError()+".")},e.prototype.onResize=function(e){var t=this.gl,r=e.clientWidth,o=e.clientHeight;t.viewport(0,0,r,o),e.width=r,e.height=o,this.width=r,this.height=o},e.prototype._step=function(e,t,r){var o=this,n=o.gl,i=o.programs,a=o.framebuffers,s=i[e];if(!s)throw new Error("Invalid program name: "+e+".");n.useProgram(s.program);var l=r?a[r]:null;if(void 0===l)throw new Error("Invalid output texture: "+r+".");n.bindFramebuffer(n.FRAMEBUFFER,l);for(var u=0;u<t.length;u++)n.activeTexture(n.TEXTURE0+u),n.bindTexture(n.TEXTURE_2D,this.textures[t[u]]);var c=n.getAttribLocation(s.program,"aPosition");n.vertexAttribPointer(c,2,n.FLOAT,!1,0,0),n.enableVertexAttribArray(c)},e.prototype.step=function(e,t,r){void 0===t&&(t=[]);var o=this,n=o.gl,i=o.errorState,a=o.quadPositionsBuffer;i||(this.setProgramUniform(e,"u_scale",[1,1],"FLOAT"),this.setProgramUniform(e,"u_translation",[0,0],"FLOAT"),n.bindBuffer(n.ARRAY_BUFFER,a),this._step(e,t,r),n.drawArrays(n.TRIANGLE_STRIP,0,4))},e.prototype.stepBoundary=function(e,t,r){void 0===t&&(t=[]);var o=this,n=o.gl,i=o.errorState,a=o.boundaryPositionsBuffer,s=o.width,l=o.height;if(!i){var u=[1/s,1/l];this.setProgramUniform(e,"u_scale",[1-u[0],1-u[1]],"FLOAT"),this.setProgramUniform(e,"u_translation",u,"FLOAT"),n.bindBuffer(n.ARRAY_BUFFER,a),this._step(e,t,r),n.drawArrays(n.LINE_LOOP,0,4)}},e.prototype.stepNonBoundary=function(e,t,r){void 0===t&&(t=[]);var o=this,n=o.gl,i=o.errorState,a=o.quadPositionsBuffer,s=o.width,l=o.height;if(!i){var u=[1/s,1/l];this.setProgramUniform(e,"u_scale",[1-2*u[0],1-2*u[1]],"FLOAT"),this.setProgramUniform(e,"u_translation",u,"FLOAT"),n.bindBuffer(n.ARRAY_BUFFER,a),this._step(e,t,r),n.drawArrays(n.TRIANGLE_STRIP,0,4)}},e.prototype.stepCircle=function(e,t,r,o,n){void 0===o&&(o=[]);var i=this,a=i.gl,s=i.errorState,l=i.circlePositionsBuffer,u=i.width,c=i.height;s||(this.setProgramUniform(e,"u_scale",[r/u,r/c],"FLOAT"),this.setProgramUniform(e,"u_translation",[2*t[0]/u-1,-2*t[1]/c+1],"FLOAT"),a.bindBuffer(a.ARRAY_BUFFER,l),this._step(e,o,n),a.drawArrays(a.TRIANGLE_FAN,0,22))},e.prototype.swapTextures=function(e,t){var r=this.textures,o=this.framebuffers,n=r[e];r[e]=this.textures[t],r[t]=n,n=o[e],o[e]=this.framebuffers[t],o[t]=n},e.prototype.reset=function(){var e=this,t=e.gl,r=e.programs,o=e.framebuffers,n=e.textures,i=e.shaders,a=e.defaultVertexShader;Object.keys(r).forEach((function(e){var o=r[e].program;t.deleteProgram(o),delete r[e]})),Object.keys(o).forEach((function(e){var r=o[e];t.deleteFramebuffer(r),delete o[e]})),Object.keys(n).forEach((function(e){var r=n[e];t.deleteTexture(r),delete n[e]}));for(var s=i.length-1;s>=0;s--)i[s]!==a&&(t.deleteShader(i[s]),i.splice(s,1))},e}();t.GPGPU=c},647:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.INT_TYPE=t.FLOAT_TYPE=t.INT_4D_UNIFORM=t.INT_3D_UNIFORM=t.INT_2D_UNIFORM=t.INT_1D_UNIFORM=t.FLOAT_4D_UNIFORM=t.FLOAT_3D_UNIFORM=t.FLOAT_2D_UNIFORM=t.FLOAT_1D_UNIFORM=void 0,t.FLOAT_1D_UNIFORM="1f",t.FLOAT_2D_UNIFORM="2f",t.FLOAT_3D_UNIFORM="3f",t.FLOAT_4D_UNIFORM="3f",t.INT_1D_UNIFORM="1i",t.INT_2D_UNIFORM="2i",t.INT_3D_UNIFORM="3i",t.INT_4D_UNIFORM="3i",t.FLOAT_TYPE="FLOAT",t.INT_TYPE="INT"},561:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SingleColorFragShader=t.GPGPU=void 0;var o=r(576);Object.defineProperty(t,"GPGPU",{enumerable:!0,get:function(){return o.GPGPU}});var n=r(929);t.SingleColorFragShader=n.default},416:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\nattribute vec2 aPosition;\nuniform vec2 u_scale;\nuniform vec2 u_translation;\nvarying vec2 uv_local;\nvarying vec2 uv;\nvoid main() {\n\t// Calculate UV coordinates of current rendered object.\n\tuv_local = 0.5 * (aPosition + 1.0);\n\t// Apply transformations.\n\tvec2 position = u_scale * aPosition + u_translation;\n\t// Calculate a global uv for the viewport.\n\tuv = 0.5 * (position + 1.0);\n\t// Calculate vertex position.\n\tgl_Position = vec4(position, 0, 1);\n}\n"},929:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="\nprecision highp float;\nuniform vec3 u_color;\nvoid main() {\n\tgl_FragColor = vec4(u_color, 1);\n}"},950:e=>{e.exports="precision mediump float;\n\nvarying vec2 uv;\nuniform sampler2D u_state;\n\nvoid main() {\n\tvec2 currentState = texture2D(u_state, uv).xy;\n\t// Add external force to current px.\n\tgl_FragColor = vec4(currentState, -5.0, 0);\n}"},539:e=>{e.exports="precision mediump float;\n\nvarying vec2 uv;\nuniform sampler2D u_state;\n\nvoid main() {\n\tfloat position = texture2D(u_state, uv).r / 20.0 + 0.5;\n\tif (position > 1.0) position = 1.0;\n\tif (position < 0.0) position = 0.0;\n\n\tif (position < 0.5){\n\t\tposition *= 2.0;\n\t\t//position = 0 -> blue\n\t\t//position = 1 -> magenta\n\t\tgl_FragColor = vec4((255.0*position)/255.0,(179.0*(1.0-position))/255.0,(150.0-54.0*position)/255.0,1.0);\n\t} else {\n\t\tposition -= 0.5;\n\t\tposition *= 2.0;\n\t\t//position = 0 -> magenta\n\t\t//position = 1 -> white\n\t\tgl_FragColor = vec4((255.0-(10.0*position))/255.0,(223.0*position)/255.0,(106.0+(67.0*position))/255.0,1.0);\n\t}\n}"},942:e=>{e.exports="precision mediump float;\n\n#define K 2.0\n#define D 1.0\n#define DT 1.0\n#define MASS 10.0\n\nvarying vec2 uv;\nuniform sampler2D u_state; // position, velocity, externalForces = r, g, b\nuniform vec2 u_pxSize;\n\nvoid main() {\n\n\tvec3 currentState = texture2D(u_state, uv).xyz;\n\tfloat currentPosition = currentState.x;\n\tfloat currentVelocity = currentState.y;\n\tfloat fTotal = currentState.z;\n\n\t// Get interactions with N, S, E, W neighbors.\n\tfor (int i = -1; i <= 1; i += 2) {\n\t\tfor (int j = -1; j <= 1; j += 2) {\n\t\t\t// Calculate uv coordinate of neighbor px.\n\t\t\tvec2 neighborUV = uv + vec2(u_pxSize.x * float(i), u_pxSize.y * float(j));\n\t\t\t// Apply spring damper constraint.\n\t\t\tvec2 neighborState = texture2D(u_state, neighborUV).xy;\n\t\t\tfloat deltaP =  neighborState.x - currentPosition;\n\t\t\tfloat deltaV = neighborState.y - currentVelocity;\n\t\t\tfTotal += K * deltaP + D * deltaV;\n\t\t}\n\t}\n\n\tfloat acceleration = fTotal / MASS;\n\tfloat velocity = acceleration * DT + currentVelocity;\n\tfloat position = velocity * DT + currentPosition;\n\n\tgl_FragColor = vec4(position, velocity, 0, 0);\n}"}},t={};function r(o){if(t[o])return t[o].exports;var n=t[o]={exports:{}};return e[o](n,n.exports,r),n.exports}r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,